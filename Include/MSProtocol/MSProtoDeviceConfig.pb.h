// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoDeviceConfig.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoConfigEnable  
{
  MSProtoConfigEnable_Disable = 0,
  MSProtoConfigEnable_Enable = 1
};

enum MSProtoCameraImageConfig  
{
  MSProtoCameraImageConfig_Brightness = 1,
  MSProtoCameraImageConfig_Contrast = 2,
  MSProtoCameraImageConfig_Saturation = 3,
  MSProtoCameraImageConfig_Sharpness = 4,
  MSProtoCameraImageConfig_NoiseReductionLevel = 5,
  MSProtoCameraImageConfig_Display_PowerLineFrq = 6,
  MSProtoCameraImageConfig_Display_DoorMode = 7,
  MSProtoCameraImageConfig_Display_CorridorMode = 8,
  MSProtoCameraImageConfig_Display_ImageRotation = 9,
  MSProtoCameraImageConfig_Display_LocalDisplayVideo = 10,
  MSProtoCameraImageConfig_Display_KeepAspectRatio = 11,
  MSProtoCameraImageConfig_Display_DN_Switch_Refocus = 12,
  MSProtoCameraImageConfig_Display_IR_SmartMode = 13,
  MSProtoCameraImageConfig_Display_IR_NearViewLevel = 14,
  MSProtoCameraImageConfig_Display_IR_MiddleViewLevel = 15,
  MSProtoCameraImageConfig_Display_IR_FarViewLevel = 16
};

enum MSProtoCameraImagePowerLineFrq  
{
  MSProtoCameraImagePowerLineFrq_None = 0,
  MSProtoCameraImagePowerLineFrq_60Hz = 1,
  MSProtoCameraImagePowerLineFrq_50Hz = 2
};

enum MSProtoCameraImageDoorMode  
{
  MSProtoCameraImageDoorMode_None = 0,
  MSProtoCameraImageDoorMode_Outdoor = 1,
  MSProtoCameraImageDoorMode_Indoor = 2
};

enum MSProtoCameraImageCorridorMode  
{
  MSProtoCameraImageCorridorMode_None = 0,
  MSProtoCameraImageCorridorMode_Off = 1,
  MSProtoCameraImageCorridorMode_Clockwise90 = 2,
  MSProtoCameraImageCorridorMode_Anticlockwise90 = 3
};

enum MSProtoCameraImageRotationMode  
{
  MSProtoCameraImageRotationMode_None = 0,
  MSProtoCameraImageRotationMode_Off = 1,
  MSProtoCameraImageRotationMode_Rotating180 = 2,
  MSProtoCameraImageRotationMode_Horizontal = 3,
  MSProtoCameraImageRotationMode_Vertical = 4
};

enum MSProtoCameraImageLocalDisplayVideo  
{
  MSProtoCameraImageLocalDisplayVideo_None = 0,
  MSProtoCameraImageLocalDisplayVideo_Off = 1,
  MSProtoCameraImageLocalDisplayVideo_NTSC = 2,
  MSProtoCameraImageLocalDisplayVideo_PAL = 3
};

enum MSProtoCameraImageIRSmartMode  
{
  MSProtoCameraImageIRSmartMode_None = 0,
  MSProtoCameraImageIRSmartMode_Auto = 1,
  MSProtoCameraImageIRSmartMode_Customize = 2
};

enum MSProtoCameraDayNightConfig  
{
  MSProtoCameraDayNightConfig_Mode = 1,
  MSProtoCameraDayNightConfig_Day2NightValue = 2,
  MSProtoCameraDayNightConfig_Night2DayValue = 3,
  MSProtoCameraDayNightConfig_StartNightHour = 4,
  MSProtoCameraDayNightConfig_StartNightMinute = 5,
  MSProtoCameraDayNightConfig_EndNightHour = 6,
  MSProtoCameraDayNightConfig_EndNightMinute = 7,
  MSProtoCameraDayNightConfig_SensorValue = 8,
  MSProtoCameraDayNightConfig_ScheduleEnable = 9
};

enum MSProtoCameraDayNightParam  
{
  MSProtoCameraDayNightParam_ExposureLevel = 1,
  MSProtoCameraDayNightParam_MinShutter = 2,
  MSProtoCameraDayNightParam_MaxShutter = 3,
  MSProtoCameraDayNightParam_LimitGainLevel = 4,
  MSProtoCameraDayNightParam_IRCutLatency = 5,
  MSProtoCameraDayNightParam_IRCutEnable = 6,
  MSProtoCameraDayNightParam_IRLedEnable = 7,
  MSProtoCameraDayNightParam_WhiteLedEnable = 8,
  MSProtoCameraDayNightParam_ColorMode = 9
};

enum MSProtoCameraDayNightMode  
{
  MSProtoCameraDayNightMode_None = 0,
  MSProtoCameraDayNightMode_AutoMode = 1,
  MSProtoCameraDayNightMode_NightMode = 2,
  MSProtoCameraDayNightMode_DayMode = 3,
  MSProtoCameraDayNightMode_Customize = 4
};

enum MSProtoCameraDayNightShutter  
{
  MSProtoCameraDayNightShutter_None = 0,
  MSProtoCameraDayNightShutter_1 = 1,
  MSProtoCameraDayNightShutter_1of5 = 2,
  MSProtoCameraDayNightShutter_1of10 = 3,
  MSProtoCameraDayNightShutter_1of25_Or_1of30 = 4,
  MSProtoCameraDayNightShutter_1of50_Or_1of60 = 5,
  MSProtoCameraDayNightShutter_1of100_Or_1of120 = 6,
  MSProtoCameraDayNightShutter_1of250 = 7,
  MSProtoCameraDayNightShutter_1of500 = 8,
  MSProtoCameraDayNightShutter_1of750 = 9,
  MSProtoCameraDayNightShutter_1of1000 = 10,
  MSProtoCameraDayNightShutter_1of2000 = 11,
  MSProtoCameraDayNightShutter_1of4000 = 12,
  MSProtoCameraDayNightShutter_1of10000 = 13,
  MSProtoCameraDayNightShutter_1of100000 = 14
};

enum MSProtoCameraDayNightColorMode  
{
  MSProtoCameraDayNightColorMode_None = 0,
  MSProtoCameraDayNightColorMode_BWMode = 1,
  MSProtoCameraDayNightColorMode_ColorMode = 2
};

enum MSProteCameraDayNight  
{
  MSProteCameraDayNight_Day = 0,
  MSProteCameraDayNight_Night = 1
};

enum MSProtoCameraOSDConfig  
{
  MSProtoCameraOSDConfig_FrontSize = 1,
  MSProtoCameraOSDConfig_FrontColor = 2,
  MSProtoCameraOSDConfig_TitleEnable = 3,
  MSProtoCameraOSDConfig_TitleText = 4,
  MSProtoCameraOSDConfig_TitlePostion = 5,
  MSProtoCameraOSDConfig_DateEnable = 6,
  MSProtoCameraOSDConfig_DatePostion = 7,
  MSProtoCameraOSDConfig_DateFormat = 8
};

enum MSProtoCameraOSDFrontSize  
{
  MSProtoCameraOSDFrontSize_None = 0,
  MSProtoCameraOSDFrontSize_Smallest = 1,
  MSProtoCameraOSDFrontSize_Small = 2,
  MSProtoCameraOSDFrontSize_Medium = 3,
  MSProtoCameraOSDFrontSize_Large = 4,
  MSProtoCameraOSDFrontSize_Largest = 5,
  MSProtoCameraOSDFrontSize_Auto = 6
};

enum MSProtoCameraOSDPostion  
{
  MSProtoCameraOSDPostion_None = 0,
  MSProtoCameraOSDPostion_TopLeft = 1,
  MSProtoCameraOSDPostion_TopRight = 2,
  MSProtoCameraOSDPostion_BottomLeft = 3,
  MSProtoCameraOSDPostion_BottomRight = 4
};

enum MSProtoCameraOSDDateFormat  
{
  MSProtoCameraOSDDateFormat_None = 0,
  MSProtoCameraOSDDateFormat_YYYYMMDD = 1,
  MSProtoCameraOSDDateFormat_MMDDYYYY = 2,
  MSProtoCameraOSDDateFormat_DDMMYYYY = 3
};

enum MSProtoCameraMaskConfig  
{
  MSProtoCameraMaskConfig_Enable = 1,
  MSProtoCameraMaskConfig_BGColor = 2,
  MSProtoCameraMaskConfig_MaxZoomRatio = 3
};

enum MSProtoCameraMaskParam  
{
  MSProtoCameraMaskParam_X = 1,
  MSProtoCameraMaskParam_Y = 2,
  MSProtoCameraMaskParam_Width = 3,
  MSProtoCameraMaskParam_Height = 4,
  MSProtoCameraMaskParam_Show = 5,
  MSProtoCameraMaskParam_Name = 6,
  MSProtoCameraMaskParam_Type = 7,
  MSProtoCameraMaskParam_ZoomRatio = 8
};

enum MSProtoCameraMaskBGColor  
{
  MSProtoCameraMaskBGColor_None = 0,
  MSProtoCameraMaskBGColor_White = 1,
  MSProtoCameraMaskBGColor_Black = 2,
  MSProtoCameraMaskBGColor_Blue = 3,
  MSProtoCameraMaskBGColor_Yellow = 4,
  MSProtoCameraMaskBGColor_Green = 5,
  MSProtoCameraMaskBGColor_Brown = 6,
  MSProtoCameraMaskBGColor_Red = 7,
  MSProtoCameraMaskBGColor_Violet = 8
};

enum MSProtoImageEnhanceMentConfig  
{
  MSProtoImageEnhanceMentConfig_IRBalanceMode = 1,
  MSProtoImageEnhanceMentConfig_ReduceMotionBlur = 2,
  MSProtoImageEnhanceMentConfig_DeblurLevel = 3,
  MSProtoImageEnhanceMentConfig_DefogMode = 4,
  MSProtoImageEnhanceMentConfig_AntifogIntensity = 5,
  MSProtoImageEnhanceMentConfig_DImageTabilisation = 6,
  MSProtoImageEnhanceMentConfig_WhiteBalanceMode = 7,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule0 = 8,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule1 = 9,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule2 = 10,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule3 = 11,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule4 = 12,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule5 = 13,
  MSProtoImageEnhanceMentConfig_WhiteBalanceSchedule6 = 14,
  MSProtoImageEnhanceMentConfig_RedGainLevel = 15,
  MSProtoImageEnhanceMentConfig_BlueGainLevel = 16,
  MSProtoImageEnhanceMentConfig_ExposureMode = 17,
  MSProtoImageEnhanceMentConfig_ExposureTime = 18,
  MSProtoImageEnhanceMentConfig_ExposureGainLevel = 19,
  MSProtoImageEnhanceMentConfig_ExposureSchdule0 = 20,
  MSProtoImageEnhanceMentConfig_ExposureSchdule1 = 21,
  MSProtoImageEnhanceMentConfig_ExposureSchdule2 = 22,
  MSProtoImageEnhanceMentConfig_ExposureSchdule3 = 23,
  MSProtoImageEnhanceMentConfig_ExposureSchdule4 = 24,
  MSProtoImageEnhanceMentConfig_ExposureSchdule5 = 25,
  MSProtoImageEnhanceMentConfig_ExposureSchdule6 = 26,
  MSProtoImageEnhanceMentConfig_WdrMode = 27,
  MSProtoImageEnhanceMentConfig_WdrModeStartHour = 28,
  MSProtoImageEnhanceMentConfig_WdrModeStartMinute = 29,
  MSProtoImageEnhanceMentConfig_WdrModeStopHour = 30,
  MSProtoImageEnhanceMentConfig_WdrModeStopMinute = 31,
  MSProtoImageEnhanceMentConfig_WdrLevel = 32,
  MSProtoImageEnhanceMentConfig_WdrAflevel = 33,
  MSProtoImageEnhanceMentConfig_HlcMode = 34,
  MSProtoImageEnhanceMentConfig_Hlclevel = 35
};

enum MSProtoWhiteBalanceMode  
{
  MSProtoWhiteBalanceMode_None = 0,
  MSProtoWhiteBalanceMode_Auto = 1,
  MSProtoWhiteBalanceMode_Manual = 2,
  MSProtoWhiteBalanceMode_Incandescent = 3,
  MSProtoWhiteBalanceMode_Warm = 4,
  MSProtoWhiteBalanceMode_Natural = 5,
  MSProtoWhiteBalanceMode_Flurescent = 6,
  MSProtoWhiteBalanceMode_Schedule = 7
};

enum MSProtoImageExposureMode  
{
  MSProtoImageExposureMode_None = 0,
  MSProtoImageExposureMode_Auto = 1,
  MSProtoImageExposureMode_Manual = 2,
  MSProtoImageExposureMode_Schedule = 3
};

enum MSProtoWdrMode  
{
  MSProtoWdrMode_None = 0,
  MSProtoWdrMode_Off = 1,
  MSProtoWdrMode_On = 2,
  MSProtoWdrMode_Customize = 3
};

enum MSProtoWdrLevel  
{
  MSProtoWdrLevel_None = 0,
  MSProtoWdrLevel_Low = 1,
  MSProtoWdrLevel_MediumOrHigh = 2,
  MSProtoWdrLevel_Auto = 3
};

enum MSProtoHlcMode  
{
  MSProtoHlcMode_None = 0,
  MSProtoHlcMode_Off = 1,
  MSProtoHlcMode_General = 2,
  MSProtoHlcMode_Enhanced = 3
};

enum MSProtoCameraVideoConfig  
{
  MSProtoCameraVideoConfig_Codec = 1,
  MSProtoCameraVideoConfig_FrameRate = 2,
  MSProtoCameraVideoConfig_BitRate = 3,
  MSProtoCameraVideoConfig_Resolution = 4,
  MSProtoCameraVideoConfig_GopSize = 5,
  MSProtoCameraVideoConfig_BitRateControl = 6,
  MSProtoCameraVideoConfig_VBRQuality = 7,
  MSProtoCameraVideoConfig_ProfileLevel = 8,
  MSProtoCameraVideoConfig_SmartStreamEnable = 9,
  MSProtoCameraVideoConfig_SmartStreamLevel = 10,
  MSProtoCameraVideoConfig_JpegQuality = 11,
  MSProtoCameraVideoConfig_StreamEnbale = 12
};

enum MSProtoVideoConfigCodec  
{
  MSProtoVideoConfigCodec_None = 0,
  MSProtoVideoConfigCodec_H264 = 1,
  MSProtoVideoConfigCodec_H265 = 2,
  MSProtoVideoConfigCodec_Mjpeg = 3,
  MSProtoVideoConfigCodec_Mpeg4 = 4
};

enum MSProtoH264ProfileLevel  
{
  MSProtoH264ProfileLevel_None = 0,
  MSProtoH264ProfileLevel_Base = 1,
  MSProtoH264ProfileLevel_Main = 2,
  MSProtoH264ProfileLevel_High = 3
};

enum MSProtoVideoJpegQuality  
{
  MSProtoVideoJpegQuality_None = 0,
  MSProtoVideoJpegQuality_Low = 1,
  MSProtoVideoJpegQuality_Medium = 2,
  MSProtoVideoJpegQuality_High = 3,
  MSProtoVideoJpegQuality_Higher = 4
};

enum MSProtoVideoVbrQuality  
{
  MSProtoVideoVbrQuality_None = 0,
  MSProtoVideoVbrQuality_Low = 1,
  MSProtoVideoVbrQuality_Medium = 2,
  MSProtoVideoVbrQuality_High = 3
};

enum MSProtoVideoRateControl  
{
  MSProtoVideoRateControl_None = 0,
  MSProtoVideoRateControl_CBR = 1,
  MSProtoVideoRateControl_VBR = 2
};

enum MSProtoVideoResoltion  
{
  MSProtoVideoResoltion_None = 0,
  MSProtoVideoResoltion_2592_1944 = 1,
  MSProtoVideoResoltion_2592_1520 = 2,
  MSProtoVideoResoltion_2560_1440 = 3,
  MSProtoVideoResoltion_2048_1536 = 4,
  MSProtoVideoResoltion_1920_1080 = 5,
  MSProtoVideoResoltion_1280_960 = 6,
  MSProtoVideoResoltion_1280_720 = 7,
  MSProtoVideoResoltion_704_576 = 8,
  MSProtoVideoResoltion_640_480 = 9,
  MSProtoVideoResoltion_640_360 = 10,
  MSProtoVideoResoltion_352_288 = 11,
  MSProtoVideoResoltion_320_240 = 12,
  MSProtoVideoResoltion_320_192 = 13,
  MSProtoVideoResoltion_320_176 = 14
};

enum MSProtoAudioConfigMode  
{
  MSProtoAudioConfigMode_None = 0,
  MSProtoAudioConfigMode_Input = 1,
  MSProtoAudioConfigMode_Output = 2,
  MSProtoAudioConfigMode_Both = 3
};

enum MSProtoAudioConfigCodec  
{
  MSProtoAudioConfigCodec_None = 0,
  MSProtoAudioConfigCodec_G711U = 1,
  MSProtoAudioConfigCodec_G711A = 2,
  MSProtoAudioConfigCodec_AAC = 3,
  MSProtoAudioConfigCodec_G722 = 4,
  MSProtoAudioConfigCodec_G726 = 5
};

enum MSProtoAudioConfigSampleRate  
{
  MSProtoAudioConfigSampleRate_None = 1,
  MSProtoAudioConfigSampleRate_8000hz = 2,
  MSProtoAudioConfigSampleRate_16000hz = 3
};

enum MSProtoCameraAudioConfig  
{
  MSProtoCameraAudioConfig_Enable = 1,
  MSProtoCameraAudioConfig_Mode = 2,
  MSProtoCameraAudioConfig_DeNoiseEnable = 3,
  MSProtoCameraAudioConfig_Codec = 4,
  MSProtoCameraAudioConfig_SampleRate = 5,
  MSProtoCameraAudioConfig_InputVol = 6,
  MSProtoCameraAudioConfig_OutputVol = 7,
  MSProtoCameraAudioConfig_AutoGainEnbale = 8
};

enum MSProtoCameraSystemConfig  
{
  MSProtoCameraSystemConfig_DeviceName = 1,
  MSProtoCameraSystemConfig_DeviceModel = 2,
  MSProtoCameraSystemConfig_HardwareVer = 3,
  MSProtoCameraSystemConfig_SoftwareVer = 4,
  MSProtoCameraSystemConfig_MacAddress = 5,
  MSProtoCameraSystemConfig_DeviceInfo = 6,
  MSProtoCameraSystemConfig_AlarmInputCount = 7,
  MSProtoCameraSystemConfig_AlarOutputCount = 8,
  MSProtoCameraSystemConfig_DeviceRunTime = 9
};

enum MSProtoCameraDateConfig  
{
  MSProtoCameraDateConfig_Time_Year = 1,
  MSProtoCameraDateConfig_Time_Month = 2,
  MSProtoCameraDateConfig_Time_Day = 3,
  MSProtoCameraDateConfig_Time_Hour = 4,
  MSProtoCameraDateConfig_Time_Minute = 5,
  MSProtoCameraDateConfig_Time_Second = 6,
  MSProtoCameraDateConfig_TimeZone = 7,
  MSProtoCameraDateConfig_NtpAddr = 8,
  MSProtoCameraDateConfig_NtpEnable = 9,
  MSProtoCameraDateConfig_NtpInterval = 10,
  MSProtoCameraDateConfig_DaylightEnable = 11,
  MSProtoCameraDateConfig_DateMode = 12
};

enum MSProtoCameraNtpInterval  
{
  MSProtoCameraNtpInterval_None = 0,
  MSProtoCameraNtpInterval_1Hour = 1,
  MSProtoCameraNtpInterval_2Hours = 2,
  MSProtoCameraNtpInterval_5Hours = 3,
  MSProtoCameraNtpInterval_10Hours = 4,
  MSProtoCameraNtpInterval_1Day = 5,
  MSProtoCameraNtpInterval_2Days = 6,
  MSProtoCameraNtpInterval_5Days = 7,
  MSProtoCameraNtpInterval_10Days = 8,
  MSProtoCameraNtpInterval_30Days = 9
};

enum MSProtoCameraDateMode  
{
  MSProtoCameraDateMode_None = 0,
  MSProtoCameraDateMode_Ntp = 1,
  MSProtoCameraDateMode_Computer = 2,
  MSProtoCameraDateMode_Manual = 3
};

enum MSProtoPtzBasicConfig  
{
  MSProtoPtzBasicConfig_ZoomStatus = 1,
  MSProtoPtzBasicConfig_PanTiltStatus = 2,
  MSProtoPtzBasicConfig_PresetStatus = 3,
  MSProtoPtzBasicConfig_PresetFreezing = 4,
  MSProtoPtzBasicConfig_PresetSpeed = 5,
  MSProtoPtzBasicConfig_PatrolRecovering = 6,
  MSProtoPtzBasicConfig_PatrolRecoveryTime = 7,
  MSProtoPtzBasicConfig_FocusMode = 8,
  MSProtoPtzBasicConfig_SetResumeTime = 9
};

enum MSProtoPtzBasicStatus  
{
  MSProtoPtzBasicStatus_None = 0,
  MSProtoPtzBasicStatus_AlwaysClose = 1,
  MSProtoPtzBasicStatus_AlwaysOpen = 2,
  MSProtoPtzBasicStatus_2Seconds = 3,
  MSProtoPtzBasicStatus_5Seconds = 4,
  MSProtoPtzBasicStatus_10Seconds = 5
};

enum MSProtoPtzFocusMode  
{
  MSProtoPtzFocusMode_None = 0,
  MSProtoPtzFocusMode_Auto = 1,
  MSProtoPtzFocusMode_SemiAuto = 2,
  MSProtoPtzFocusMode_Manuals = 3
};

enum MSProtoPtzResumeTime  
{
  MSProtoPtzResumeTime_None = 0,
  MSProtoPtzResumeTime_Disable = 1,
  MSProtoPtzResumeTime_30Seconds = 2,
  MSProtoPtzResumeTime_60Seconds = 3,
  MSProtoPtzResumeTime_300Seconds = 4
};

enum MSProtoPtzAutoHomeConfig  
{
  MSProtoPtzAutoHomeConfig_Enable = 1,
  MSProtoPtzAutoHomeConfig_WaitTime = 2,
  MSProtoPtzAutoHomeConfig_Mode = 3,
  MSProtoPtzAutoHomeConfig_ModeNum = 4
};

enum MSProtoPtzAutoHomeMode  
{
  MSProtoPtzAutoHomeMode_None = 0,
  MSProtoPtzAutoHomeMode_Preset = 1
};

enum MSProtoPtzLimitConfig  
{
  MSProtoPtzLimitConfig_Mode = 1,
  MSProtoPtzLimitConfig_ManualEnable = 2,
  MSProtoPtzLimitConfig_ManualStatus = 3,
  MSProtoPtzLimitConfig_ScanEnable = 4,
  MSProtoPtzLimitConfig_ScanStatus = 5,
  MSProtoPtzLimitConfig_SetOperation = 6
};

enum MSProtoPtzLimitMode  
{
  MSProtoPtzLimitSetMode_None = 0,
  MSProtoPtzLimitSetMode_ManualLimit = 1,
  MSProtoPtzLimitSetMode_ScanLimit = 2
};

enum MSProtoPtzLimitSetOptMode  
{
  MSProtoPtzLimitSetOptMode_None = 0,
  MSProtoPtzLimitSetOptMode_Cancel = 1,
  MSProtoPtzLimitSetOptMode_Set = 2,
  MSProtoPtzLimitSetOptMode_SetLeft = 3,
  MSProtoPtzLimitSetOptMode_SetRight = 4,
  MSProtoPtzLimitSetOptMode_SetDown = 5,
  MSProtoPtzLimitSetOptMode_SetUp = 6,
  MSProtoPtzLimitSetOptMode_Clear = 7,
  MSProtoPtzLimitSetOptMode_Save = 8
};

enum MSProtoPtzAutoTrackConfig  
{
  MSProtoPtzAutoTrackConfig_Enable = 1,
  MSProtoPtzAutoTrackConfig_Show = 2,
  MSProtoPtzAutoTrackConfig_Sensitivity = 3,
  MSProtoPtzAutoTrackConfig_MaxTime = 4,
  MSProtoPtzAutoTrackConfig_Manual = 5,
  MSProtoPtzAutoTrackConfig_Schedule0 = 6,
  MSProtoPtzAutoTrackConfig_Schedule1 = 7,
  MSProtoPtzAutoTrackConfig_Schedule2 = 8,
  MSProtoPtzAutoTrackConfig_Schedule3 = 9,
  MSProtoPtzAutoTrackConfig_Schedule4 = 10,
  MSProtoPtzAutoTrackConfig_Schedule5 = 11,
  MSProtoPtzAutoTrackConfig_Schedule6 = 12
};

enum MSProtoPtzScheduleConfig  
{
  MSProtoPtzScheduleConfig_Enable = 0,
  MSProtoPtzScheduleConfig_RecoveryTime = 1,
  MSProtoPtzScheduleConfig_Schedule0 = 2,
  MSProtoPtzScheduleConfig_Schedule1 = 3,
  MSProtoPtzScheduleConfig_Schedule2 = 4,
  MSProtoPtzScheduleConfig_Schedule3 = 5,
  MSProtoPtzScheduleConfig_Schedule4 = 6,
  MSProtoPtzScheduleConfig_Schedule5 = 7,
  MSProtoPtzScheduleConfig_Schedule6 = 8
};

enum MSProtoCleanConfigCmd  
{
  MSProtoCleanConfigCmd_None = 0,
  MSProtoCleanConfigCmd_ClearAll = 1,
  MSProtoCleanConfigCmd_ClearAllPreset = 2,
  MSProtoCleanConfigCmd_ClearAllPatrols = 4,
  MSProtoCleanConfigCmd_ClearAllPatterns = 8,
  MSProtoCleanConfigCmd_ClearAllAutoHome = 16,
  MSProtoCleanConfigCmd_ClearAllPTZLimits = 32,
  MSProtoCleanConfigCmd_ClearInitialPosition = 64,
  MSProtoCleanConfigCmd_ClearAllPrivacyMasks = 128,
  MSProtoCleanConfigCmd_ClearAllScheduleTasks = 256
};

enum MSProtoPtzInitialPostion  
{
  MSProtoPtzInitialPostion_None = 0,
  MSProtoPtzInitialPostion_Set = 1,
  MSProtoPtzInitialPostion_Clear = 2,
  MSProtoPtzInitialPostion_Call = 3
};

enum MSProtoFishEyeCorrectConfig  
{
  MSProtoFishEyeCorrectConfig_TransMode = 1
};

enum MSProtoFishEyeTransMode  
{
  MSProtoFishEyeTransMode_None = 0,
  MSProtoFishEyeTransMode_MutilChannel = 1,
  MSProtoFishEyeTransMode_BundleStream = 2
};

enum MSProtoConfigCommand  
{
  MSProtoConfigCommand_SetCameraImage = 1,
  MSProtoConfigCommand_GetCameraImage = 2,
  MSProtoConfigCommand_SetImageEnhancement = 3,
  MSProtoConfigCommand_GetImageEnhancement = 4,
  MSProtoConfigCommand_SetCameraDayNight = 5,
  MSProtoConfigCommand_GetCameraDayNight = 6,
  MSProtoConfigCommand_SetCameraOSD = 7,
  MSProtoConfigCommand_GetCameraOSD = 8,
  MSProtoConfigCommand_SetCameraMask = 9,
  MSProtoConfigCommand_GetCameraMask = 10,
  MSProtoConfigCommand_DelCameraMask = 11,
  MSProtoConfigCommand_SetCameraVideo = 12,
  MSProtoConfigCommand_GetCameraVideo = 13,
  MSProtoConfigCommand_GetCameraVideoRange = 14,
  MSProtoConfigCommand_SetCameraAudio = 15,
  MSProtoConfigCommand_GetCameraAudio = 16,
  MSProtoConfigCommand_GetCameraAudioRange = 17,
  MSProtoConfigCommand_SetCameraSystemInfo = 18,
  MSProtoConfigCommand_GetCameraSystemInfo = 19,
  MSProtoConfigCommand_SetCameraDate = 20,
  MSProtoConfigCommand_GetCameraDate = 21,
  MSProtoConfigCommand_SetPtzAdvanced = 22,
  MSProtoConfigCommand_GetPtzAdvanced = 23,
  MSProtoConfigCommand_SetFishEyeAdvanced = 24,
  MSProtoConfigCommand_GetFishEyeAdvanced = 25
};

enum MSProtoPtzAdvancedCommand  
{
  MSProtoPtzAdvancedCommand_Basic = 1,
  MSProtoPtzAdvancedCommand_AutoHome = 2,
  MSProtoPtzAdvancedCommand_PtzLimit = 3,
  MSProtoPtzAdvancedCommand_InitialPos = 4,
  MSProtoPtzAdvancedCommand_ScheduleTask = 5,
  MSProtoPtzAdvancedCommand_AutoTrack = 6,
  MSProtoPtzAdvancedCommand_ConfigClear = 7,
  MSProtoPtzAdvancedCommand_RS485 = 8,
  MSProtoPtzAdvancedCommand_Status = 9
};

enum MSProtoFishEyeAdvancedCommand  
{
  MSProtoFishEyeAdvancedCommand_Correct = 1
};

// ===================================================================

struct MSProtoCameraImageTypeInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraImageConfig> types;

	bool operator==(const MSProtoCameraImageTypeInfos& _opt_msg_) const
	{
		return types == _opt_msg_.types;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraImageTypeInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraImageConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraImageConfig type=(MSProtoCameraImageConfig)0;
	int32_t value=0;

	bool operator==(const MSProtoCameraImageConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraImageConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraImageConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraImageConfigInfo> infos;

	bool operator==(const MSProtoCameraImageConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraImageConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraDayNightConfig type=(MSProtoCameraDayNightConfig)0;
	int32_t value=0;

	bool operator==(const MSProtoCameraDayNightConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraDayNightConfigInfo> infos;

	bool operator==(const MSProtoCameraDayNightConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightParamSingle :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraDayNightParam type=(MSProtoCameraDayNightParam)0;
	int32_t value=0;

	bool operator==(const MSProtoCameraDayNightParamSingle& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightParamSingle";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightParamInfo :public MSPacket
{
 public:
	std::vector<MSProtoCameraDayNightParamSingle> infos;
	// filed daynight Required !!
	MSProteCameraDayNight daynight=(MSProteCameraDayNight)0;

	bool operator==(const MSProtoCameraDayNightParamInfo& _opt_msg_) const
	{
		return infos == _opt_msg_.infos
			&& daynight == _opt_msg_.daynight;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightParamInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightParamInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraDayNightParamInfo> infos;

	bool operator==(const MSProtoCameraDayNightParamInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightParamInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightSchedule :public MSPacket
{
 public:
	// filed index Required !!
	int32_t index=0;
	// filed enable Required !!
	int32_t enable=0;
	// filed starttime Required !!
	int64_t starttime=0;
	// filed endtime Required !!
	int64_t endtime=0;
	std::vector<MSProtoCameraDayNightParamSingle> infos;

	bool operator==(const MSProtoCameraDayNightSchedule& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& enable == _opt_msg_.enable
			&& starttime == _opt_msg_.starttime
			&& endtime == _opt_msg_.endtime
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightSchedule";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightSchedules :public MSPacket
{
 public:
	std::vector<MSProtoCameraDayNightSchedule> infos;

	bool operator==(const MSProtoCameraDayNightSchedules& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightSchedules";}
};

// -------------------------------------------------------------------

struct MSProtoGetCameraDayNightRequest :public MSPacket
{
 public:
	std::vector<MSProtoCameraDayNightConfig> configs;
	std::vector<MSProtoCameraDayNightParam> params;
	bool queryschedule=false;

	bool operator==(const MSProtoGetCameraDayNightRequest& _opt_msg_) const
	{
		return configs == _opt_msg_.configs
			&& params == _opt_msg_.params
			&& queryschedule == _opt_msg_.queryschedule;
	}

private:
	const char* getTypeName()const{return "MSProtoGetCameraDayNightRequest";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDayNightInfos :public MSPacket
{
 public:
	MSProtoCameraDayNightConfigInfos configs;
	MSProtoCameraDayNightParamInfos params;
	MSProtoCameraDayNightSchedules schedules;

	bool operator==(const MSProtoCameraDayNightInfos& _opt_msg_) const
	{
		return configs == _opt_msg_.configs
			&& params == _opt_msg_.params
			&& schedules == _opt_msg_.schedules;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDayNightInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetCameraOSDRequest :public MSPacket
{
 public:
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::vector<MSProtoCameraOSDConfig> infos;

	bool operator==(const MSProtoGetCameraOSDRequest& _opt_msg_) const
	{
		return streamtype == _opt_msg_.streamtype
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetCameraOSDRequest";}
};

// -------------------------------------------------------------------

struct MSProtoGetCameraOSDRequestInfos :public MSPacket
{
 public:
	std::vector<MSProtoGetCameraOSDRequest> infos;

	bool operator==(const MSProtoGetCameraOSDRequestInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetCameraOSDRequestInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraOSDConfigSingle :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraOSDConfig type=(MSProtoCameraOSDConfig)0;
	std::string value;

	bool operator==(const MSProtoCameraOSDConfigSingle& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraOSDConfigSingle";}
};

// -------------------------------------------------------------------

struct MSProtoCameraOSDConfigInfo :public MSPacket
{
 public:
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::vector<MSProtoCameraOSDConfigSingle> infos;

	bool operator==(const MSProtoCameraOSDConfigInfo& _opt_msg_) const
	{
		return streamtype == _opt_msg_.streamtype
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraOSDConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraOSDConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraOSDConfigInfo> infos;

	bool operator==(const MSProtoCameraOSDConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraOSDConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraMaskConfig type=(MSProtoCameraMaskConfig)0;
	std::string value;

	bool operator==(const MSProtoCameraMaskConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraMaskConfigInfo> infos;

	bool operator==(const MSProtoCameraMaskConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskParamSingle :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraMaskParam type=(MSProtoCameraMaskParam)0;
	std::string value;

	bool operator==(const MSProtoCameraMaskParamSingle& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskParamSingle";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskParamInfo :public MSPacket
{
 public:
	// filed index Required !!
	int32_t index=0;
	std::vector<MSProtoCameraMaskParamSingle> infos;

	bool operator==(const MSProtoCameraMaskParamInfo& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskParamInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskParamInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraMaskParamInfo> infos;

	bool operator==(const MSProtoCameraMaskParamInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskParamInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetCameraMaskRequest :public MSPacket
{
 public:
	std::vector<MSProtoCameraMaskConfig> configs;
	std::vector<MSProtoCameraMaskParam> params;

	bool operator==(const MSProtoGetCameraMaskRequest& _opt_msg_) const
	{
		return configs == _opt_msg_.configs
			&& params == _opt_msg_.params;
	}

private:
	const char* getTypeName()const{return "MSProtoGetCameraMaskRequest";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskInfos :public MSPacket
{
 public:
	MSProtoCameraMaskConfigInfos configs;
	MSProtoCameraMaskParamInfos params;

	bool operator==(const MSProtoCameraMaskInfos& _opt_msg_) const
	{
		return configs == _opt_msg_.configs
			&& params == _opt_msg_.params;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCameraMaskIndexInfo :public MSPacket
{
 public:
	std::vector<int32_t> infos;
	bool deleteAll=false;

	bool operator==(const MSProtoCameraMaskIndexInfo& _opt_msg_) const
	{
		return infos == _opt_msg_.infos
			&& deleteAll == _opt_msg_.deleteAll;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraMaskIndexInfo";}
};

// -------------------------------------------------------------------

struct MSProtoGetImageEnhanceMentRequest :public MSPacket
{
 public:
	std::vector<MSProtoImageEnhanceMentConfig> infos;

	bool operator==(const MSProtoGetImageEnhanceMentRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetImageEnhanceMentRequest";}
};

// -------------------------------------------------------------------

struct MSProtomageEnhanceMentInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoImageEnhanceMentConfig type=(MSProtoImageEnhanceMentConfig)0;
	std::string value;

	bool operator==(const MSProtomageEnhanceMentInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtomageEnhanceMentInfo";}
};

// -------------------------------------------------------------------

struct MSProtomageEnhanceMentInfos :public MSPacket
{
 public:
	std::vector<MSProtomageEnhanceMentInfo> infos;

	bool operator==(const MSProtomageEnhanceMentInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtomageEnhanceMentInfos";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigGetInfo :public MSPacket
{
 public:
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::vector<MSProtoCameraVideoConfig> types;

	bool operator==(const MSProtoVideoConfigGetInfo& _opt_msg_) const
	{
		return streamtype == _opt_msg_.streamtype
			&& types == _opt_msg_.types;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigGetInfo";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigGetRequest :public MSPacket
{
 public:
	std::vector<MSProtoVideoConfigGetInfo> infos;

	bool operator==(const MSProtoVideoConfigGetRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigGetRequest";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigSingle :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraVideoConfig type=(MSProtoCameraVideoConfig)0;
	int32_t value=0;

	bool operator==(const MSProtoVideoConfigSingle& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigSingle";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigInfo :public MSPacket
{
 public:
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::vector<MSProtoVideoConfigSingle> infos;

	bool operator==(const MSProtoVideoConfigInfo& _opt_msg_) const
	{
		return streamtype == _opt_msg_.streamtype
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoVideoConfigInfo> infos;

	bool operator==(const MSProtoVideoConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigRangeSingle :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraVideoConfig type=(MSProtoCameraVideoConfig)0;
	std::vector<int32_t> values;
	int32_t min=0;
	int32_t max=0;

	bool operator==(const MSProtoVideoConfigRangeSingle& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& values == _opt_msg_.values
			&& min == _opt_msg_.min
			&& max == _opt_msg_.max;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigRangeSingle";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigRange :public MSPacket
{
 public:
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::vector<MSProtoVideoConfigRangeSingle> infos;

	bool operator==(const MSProtoVideoConfigRange& _opt_msg_) const
	{
		return streamtype == _opt_msg_.streamtype
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigRange";}
};

// -------------------------------------------------------------------

struct MSProtoVideoConfigRanges :public MSPacket
{
 public:
	std::vector<MSProtoVideoConfigRange> infos;

	bool operator==(const MSProtoVideoConfigRanges& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoVideoConfigRanges";}
};

// -------------------------------------------------------------------

struct MSProtoAudioConfigGetRequest :public MSPacket
{
 public:
	std::vector<MSProtoCameraAudioConfig> infos;

	bool operator==(const MSProtoAudioConfigGetRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoAudioConfigGetRequest";}
};

// -------------------------------------------------------------------

struct MSProtoAudioConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraAudioConfig type=(MSProtoCameraAudioConfig)0;
	int32_t value=0;

	bool operator==(const MSProtoAudioConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoAudioConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoAudioConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoAudioConfigInfo> infos;

	bool operator==(const MSProtoAudioConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoAudioConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoAudioConfigRange :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraAudioConfig type=(MSProtoCameraAudioConfig)0;
	std::vector<int32_t> values;
	int32_t min=0;
	int32_t max=0;

	bool operator==(const MSProtoAudioConfigRange& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& values == _opt_msg_.values
			&& min == _opt_msg_.min
			&& max == _opt_msg_.max;
	}

private:
	const char* getTypeName()const{return "MSProtoAudioConfigRange";}
};

// -------------------------------------------------------------------

struct MSProtoAudioConfigRanges :public MSPacket
{
 public:
	std::vector<MSProtoAudioConfigRange> infos;

	bool operator==(const MSProtoAudioConfigRanges& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoAudioConfigRanges";}
};

// -------------------------------------------------------------------

struct MSProtoCameraSystemInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraSystemConfig type=(MSProtoCameraSystemConfig)0;
	std::string value;

	bool operator==(const MSProtoCameraSystemInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraSystemInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraSystemInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraSystemInfo> infos;

	bool operator==(const MSProtoCameraSystemInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraSystemInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetCameraDateRequest :public MSPacket
{
 public:
	std::vector<MSProtoCameraDateConfig> infos;

	bool operator==(const MSProtoGetCameraDateRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetCameraDateRequest";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDateConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoCameraDateConfig type=(MSProtoCameraDateConfig)0;
	std::string value;

	bool operator==(const MSProtoCameraDateConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDateConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraDateConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoCameraDateConfigInfo> infos;

	bool operator==(const MSProtoCameraDateConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraDateConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetPtzBasicRequest :public MSPacket
{
 public:
	std::vector<MSProtoPtzBasicConfig> infos;

	bool operator==(const MSProtoGetPtzBasicRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetPtzBasicRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzBasicConfigInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoPtzBasicConfig type=(MSProtoPtzBasicConfig)0;
	std::string value;

	bool operator==(const MSProtoPtzBasicConfigInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzBasicConfigInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzBasicConfigInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzBasicConfigInfo> infos;

	bool operator==(const MSProtoPtzBasicConfigInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzBasicConfigInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetPtzAutoHomeRequest :public MSPacket
{
 public:
	std::vector<MSProtoPtzAutoHomeConfig> infos;

	bool operator==(const MSProtoGetPtzAutoHomeRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetPtzAutoHomeRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzAutoHomeInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoPtzAutoHomeConfig type=(MSProtoPtzAutoHomeConfig)0;
	std::string value;

	bool operator==(const MSProtoPtzAutoHomeInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzAutoHomeInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzAutoHomeInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzAutoHomeInfo> infos;

	bool operator==(const MSProtoPtzAutoHomeInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzAutoHomeInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetPtzLimitRequest :public MSPacket
{
 public:
	std::vector<MSProtoPtzLimitConfig> infos;

	bool operator==(const MSProtoGetPtzLimitRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetPtzLimitRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzLimitInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoPtzLimitConfig type=(MSProtoPtzLimitConfig)0;
	std::string value;

	bool operator==(const MSProtoPtzLimitInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzLimitInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzLimitInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzLimitInfo> infos;

	bool operator==(const MSProtoPtzLimitInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzLimitInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetPtzAutoTrackRequest :public MSPacket
{
 public:
	std::vector<MSProtoPtzAutoTrackConfig> infos;

	bool operator==(const MSProtoGetPtzAutoTrackRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetPtzAutoTrackRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzAutoTrackInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoPtzAutoTrackConfig type=(MSProtoPtzAutoTrackConfig)0;
	std::string value;

	bool operator==(const MSProtoPtzAutoTrackInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzAutoTrackInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzAutoTrackInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzAutoTrackInfo> infos;

	bool operator==(const MSProtoPtzAutoTrackInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzAutoTrackInfos";}
};

// -------------------------------------------------------------------

struct MSProtoGetPtzScheduleRequest :public MSPacket
{
 public:
	std::vector<MSProtoPtzScheduleConfig> infos;

	bool operator==(const MSProtoGetPtzScheduleRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetPtzScheduleRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzScheduleInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoPtzScheduleConfig type=(MSProtoPtzScheduleConfig)0;
	std::string value;

	bool operator==(const MSProtoPtzScheduleInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzScheduleInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzScheduleInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzScheduleInfo> infos;

	bool operator==(const MSProtoPtzScheduleInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzScheduleInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCleanPtzConfigRequest :public MSPacket
{
 public:
	// filed value Required !!
	uint32_t value=0;

	bool operator==(const MSProtoCleanPtzConfigRequest& _opt_msg_) const
	{
		return value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoCleanPtzConfigRequest";}
};

// -------------------------------------------------------------------

struct MSProtoPtzStatusInfo :public MSPacket
{
 public:
	// filed temperature Required !!
	float temperature=0;
	// filed heater Required !!
	bool heater=false;
	// filed fan Required !!
	bool fan=false;

	bool operator==(const MSProtoPtzStatusInfo& _opt_msg_) const
	{
		return temperature == _opt_msg_.temperature
			&& heater == _opt_msg_.heater
			&& fan == _opt_msg_.fan;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzStatusInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzInitialPosRequest :public MSPacket
{
 public:
	// filed value Required !!
	MSProtoPtzInitialPostion value=(MSProtoPtzInitialPostion)0;

	bool operator==(const MSProtoPtzInitialPosRequest& _opt_msg_) const
	{
		return value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzInitialPosRequest";}
};

// -------------------------------------------------------------------

struct MSProtoGetFishEyeCorrectRequest :public MSPacket
{
 public:
	std::vector<MSProtoFishEyeCorrectConfig> infos;

	bool operator==(const MSProtoGetFishEyeCorrectRequest& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoGetFishEyeCorrectRequest";}
};

// -------------------------------------------------------------------

struct MSProtoFishEyeCorrectInfo :public MSPacket
{
 public:
	// filed type Required !!
	MSProtoFishEyeCorrectConfig type=(MSProtoFishEyeCorrectConfig)0;
	std::string value;

	bool operator==(const MSProtoFishEyeCorrectInfo& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoFishEyeCorrectInfo";}
};

// -------------------------------------------------------------------

struct MSProtoFishEyeCorrectInfos :public MSPacket
{
 public:
	std::vector<MSProtoFishEyeCorrectInfo> infos;

	bool operator==(const MSProtoFishEyeCorrectInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoFishEyeCorrectInfos";}
};

// -------------------------------------------------------------------

struct MSProtoConfigInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed command Required !!
	MSProtoConfigCommand command=(MSProtoConfigCommand)0;
	std::string body;
	uint32_t param=0;

	bool operator==(const MSProtoConfigInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& command == _opt_msg_.command
			&& body == _opt_msg_.body
			&& param == _opt_msg_.param;
	}

private:
	const char* getTypeName()const{return "MSProtoConfigInfo";}
};


}
}
