// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoSystem.proto

#pragma once
#include "MSProtocol/MSPacket.h"

namespace Milesight {
namespace Protocol {


enum VMSMulticastGroupType  
{
  VMSMulticastGroupType_None = 0,
  VMSMulticastGroupType_VMSSystemNotify = 1,
  VMSMulticastGroupType_QuerySystemNotify = 2
};

enum MSProtoSystemNotifyType  
{
  MSProtoSystemNotifyType_Discover = 1,
  MSProtoSystemNotifyType_Configure = 2
};

enum MSProtoBeMasterReason  
{
  MSProtoBeMaterReason_None = 0,
  MSProtoBeMaterReason_NoOtherMaster = 1,
  MSProtoBeMaterReason_MaxOperaionId = 2,
  MSProtoBeMaterReason_MaxRuntime = 3
};

enum MSProtoOperationType  
{
  MSProtoOperationType_Add = 0,
  MSProtoOperationType_Mod = 1,
  MSProtoOperationType_Del = 2
};

// ===================================================================

struct MSProtoMulticastGroupNotify :public MSPacket
{
 public:
	// filed type Required !!
	VMSMulticastGroupType type=(VMSMulticastGroupType)0;
	std::string data;

	bool operator==(const MSProtoMulticastGroupNotify& _opt_msg_) const
	{
		return type == _opt_msg_.type
			&& data == _opt_msg_.data;
	}

private:
	const char* getTypeName()const{return "MSProtoMulticastGroupNotify";}
};

// -------------------------------------------------------------------

struct MSProtoSystemInfo :public MSPacket
{
 public:
	std::string systemId;
	std::string systemName;

	bool operator==(const MSProtoSystemInfo& _opt_msg_) const
	{
		return systemId == _opt_msg_.systemId
			&& systemName == _opt_msg_.systemName;
	}

private:
	const char* getTypeName()const{return "MSProtoSystemInfo";}
};

// -------------------------------------------------------------------

struct MSProtosNewSystemInfo :public MSPacket
{
 public:
	std::string systemId;
	std::string systemName;
	std::string systemUserName;
	std::string systemPassword;
	std::string serverName;

	bool operator==(const MSProtosNewSystemInfo& _opt_msg_) const
	{
		return systemId == _opt_msg_.systemId
			&& systemName == _opt_msg_.systemName
			&& systemUserName == _opt_msg_.systemUserName
			&& systemPassword == _opt_msg_.systemPassword
			&& serverName == _opt_msg_.serverName;
	}

private:
	const char* getTypeName()const{return "MSProtosNewSystemInfo";}
};

// -------------------------------------------------------------------

struct MSProtoServerInfo :public MSPacket
{
 public:
	// filed serverId Required !!
	std::string serverId;
	std::string serverName;
	std::string version;
	uint64_t operationId=0;
	std::string addrs;
	uint64_t confVer=0;
	MSProtoSystemNotifyType type=(MSProtoSystemNotifyType)0;

	bool operator==(const MSProtoServerInfo& _opt_msg_) const
	{
		return serverId == _opt_msg_.serverId
			&& serverName == _opt_msg_.serverName
			&& version == _opt_msg_.version
			&& operationId == _opt_msg_.operationId
			&& addrs == _opt_msg_.addrs
			&& confVer == _opt_msg_.confVer
			&& type == _opt_msg_.type;
	}

private:
	const char* getTypeName()const{return "MSProtoServerInfo";}
};

// -------------------------------------------------------------------

struct MSProtoVMSSystemNotify :public MSPacket
{
 public:
	// filed systeminfo Required !!
	MSProtoSystemInfo systeminfo;
	// filed serverinfo Required !!
	MSProtoServerInfo serverinfo;
	uint64_t serverTime=0;
	bool isMasterServer=false;
	MSProtoBeMasterReason beMasterReason=(MSProtoBeMasterReason)0;
	bool online=false;
	uint64_t serverRunTime=0;
	uint64_t serverStartTime=0;
	std::vector<MSProtoVMSSystemNotify> otherServers;

	bool operator==(const MSProtoVMSSystemNotify& _opt_msg_) const
	{
		return systeminfo == _opt_msg_.systeminfo
			&& serverinfo == _opt_msg_.serverinfo
			&& serverTime == _opt_msg_.serverTime
			&& isMasterServer == _opt_msg_.isMasterServer
			&& beMasterReason == _opt_msg_.beMasterReason
			&& online == _opt_msg_.online
			&& serverRunTime == _opt_msg_.serverRunTime
			&& serverStartTime == _opt_msg_.serverStartTime
			&& otherServers == _opt_msg_.otherServers;
	}

private:
	const char* getTypeName()const{return "MSProtoVMSSystemNotify";}
};

// -------------------------------------------------------------------

struct MSProtoDatabaseLog :public MSPacket
{
 public:
	// filed tableName Required !!
	std::string tableName;
	// filed tableId Required !!
	std::string tableId;
	// filed operationType Required !!
	MSProtoOperationType operationType=(MSProtoOperationType)0;
	// filed operationId Required !!
	uint64_t operationId=0;
	std::string details;

	bool operator==(const MSProtoDatabaseLog& _opt_msg_) const
	{
		return tableName == _opt_msg_.tableName
			&& tableId == _opt_msg_.tableId
			&& operationType == _opt_msg_.operationType
			&& operationId == _opt_msg_.operationId
			&& details == _opt_msg_.details;
	}

private:
	const char* getTypeName()const{return "MSProtoDatabaseLog";}
};

// -------------------------------------------------------------------

struct MSProtoQueryDatabaseLogResponse :public MSPacket
{
 public:
	std::vector<MSProtoDatabaseLog> logs;

	bool operator==(const MSProtoQueryDatabaseLogResponse& _opt_msg_) const
	{
		return logs == _opt_msg_.logs;
	}

private:
	const char* getTypeName()const{return "MSProtoQueryDatabaseLogResponse";}
};

// -------------------------------------------------------------------

struct MSProtoQueryDatabaseLogRequest :public MSPacket
{
 public:
	// filed startOperationId Required !!
	uint64_t startOperationId=0;

	bool operator==(const MSProtoQueryDatabaseLogRequest& _opt_msg_) const
	{
		return startOperationId == _opt_msg_.startOperationId;
	}

private:
	const char* getTypeName()const{return "MSProtoQueryDatabaseLogRequest";}
};


}
}
