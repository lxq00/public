// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoDevice.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
#include "MsProtoStorage.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoCapability  
{
  MSProtoCapability_PTZ = 1,
  MSProtoCapability_PTZ_Led = 2,
  MSProtoCapability_SubStream = 3,
  MSProtoCapability_Audio = 4,
  MSProtoCapability_Talkback = 5,
  MSProtoCapability_FishEye = 6
};

// ===================================================================

struct MSProtoDisconveryDeviceInfo :public MSPacket
{
 public:
	// filed dctype Required !!
	MSProtoDCFactoryType dctype=(MSProtoDCFactoryType)0;
	// filed ip Required !!
	std::string ip;
	// filed port Required !!
	uint32_t port=0;
	std::string mac;
	std::string name;
	std::string model;
	std::string firmwareVersion;
	std::string manufacturer;
	MSProtoDeviceType devicetype=(MSProtoDeviceType)0;
	std::string serverid;

	bool operator==(const MSProtoDisconveryDeviceInfo& _opt_msg_) const
	{
		return dctype == _opt_msg_.dctype
			&& ip == _opt_msg_.ip
			&& port == _opt_msg_.port
			&& mac == _opt_msg_.mac
			&& name == _opt_msg_.name
			&& model == _opt_msg_.model
			&& firmwareVersion == _opt_msg_.firmwareVersion
			&& manufacturer == _opt_msg_.manufacturer
			&& devicetype == _opt_msg_.devicetype
			&& serverid == _opt_msg_.serverid;
	}

private:
	const char* getTypeName()const{return "MSProtoDisconveryDeviceInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDisconveryDeviceInfos :public MSPacket
{
 public:
	std::vector<MSProtoDisconveryDeviceInfo> infos;

	bool operator==(const MSProtoDisconveryDeviceInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDisconveryDeviceInfos";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceGroupInfo :public MSPacket
{
 public:
	uint32_t groupid=0;
	uint32_t parentid=0;
	// filed name Required !!
	std::string name;
	uint32_t iconid=0;

	bool operator==(const MSProtoDeviceGroupInfo& _opt_msg_) const
	{
		return groupid == _opt_msg_.groupid
			&& parentid == _opt_msg_.parentid
			&& name == _opt_msg_.name
			&& iconid == _opt_msg_.iconid;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceGroupInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceGroupInfos :public MSPacket
{
 public:
	std::vector<MSProtoDeviceGroupInfo> infos;

	bool operator==(const MSProtoDeviceGroupInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceGroupInfos";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceGroupAllInfo :public MSPacket
{
 public:
	// filed info Required !!
	MSProtoDeviceGroupInfo info;
	std::vector<uint64_t> devid;
	MSProtoNotifyType notifytype=(MSProtoNotifyType)0;

	bool operator==(const MSProtoDeviceGroupAllInfo& _opt_msg_) const
	{
		return info == _opt_msg_.info
			&& devid == _opt_msg_.devid
			&& notifytype == _opt_msg_.notifytype;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceGroupAllInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceGroupAllInfos :public MSPacket
{
 public:
	std::vector<MSProtoDeviceGroupAllInfo> infos;

	bool operator==(const MSProtoDeviceGroupAllInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceGroupAllInfos";}
};

// -------------------------------------------------------------------

struct MSProtoDeleteGroupIds :public MSPacket
{
 public:
	std::vector<uint32_t> groupids;

	bool operator==(const MSProtoDeleteGroupIds& _opt_msg_) const
	{
		return groupids == _opt_msg_.groupids;
	}

private:
	const char* getTypeName()const{return "MSProtoDeleteGroupIds";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceGroupBindInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed groupid Required !!
	uint32_t groupid=0;

	bool operator==(const MSProtoDeviceGroupBindInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& groupid == _opt_msg_.groupid;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceGroupBindInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceLoginInfo :public MSPacket
{
 public:
	uint64_t id=0;
	// filed dctype Required !!
	MSProtoDCFactoryType dctype=(MSProtoDCFactoryType)0;
	// filed ip Required !!
	std::string ip;
	// filed port Required !!
	uint32_t port=0;
	std::string username;
	std::string password;
	std::string name;
	std::string mac;
	std::string mainstreamurl;
	std::string substreamurl;
	MSProtoStreamProtocol streamprotocol=(MSProtoStreamProtocol)0;
	uint32_t iconid=0;
	bool isdisable=false;
	std::string serverid;
	std::string runserverid;
	MSProtoDeviceType devicetype=(MSProtoDeviceType)0;

	bool operator==(const MSProtoDeviceLoginInfo& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& dctype == _opt_msg_.dctype
			&& ip == _opt_msg_.ip
			&& port == _opt_msg_.port
			&& username == _opt_msg_.username
			&& password == _opt_msg_.password
			&& name == _opt_msg_.name
			&& mac == _opt_msg_.mac
			&& mainstreamurl == _opt_msg_.mainstreamurl
			&& substreamurl == _opt_msg_.substreamurl
			&& streamprotocol == _opt_msg_.streamprotocol
			&& iconid == _opt_msg_.iconid
			&& isdisable == _opt_msg_.isdisable
			&& serverid == _opt_msg_.serverid
			&& runserverid == _opt_msg_.runserverid
			&& devicetype == _opt_msg_.devicetype;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceLoginInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceLoginInfos :public MSPacket
{
 public:
	std::vector<MSProtoDeviceLoginInfo> infos;

	bool operator==(const MSProtoDeviceLoginInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceLoginInfos";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceOptResult :public MSPacket
{
 public:
	uint64_t id=0;
	MSProtoDCFactoryType dctype=(MSProtoDCFactoryType)0;
	std::string ip;
	uint32_t port=0;
	std::string mac;
	// filed errcode Required !!
	uint32_t errcode=0;
	std::string errmsg;

	bool operator==(const MSProtoDeviceOptResult& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& dctype == _opt_msg_.dctype
			&& ip == _opt_msg_.ip
			&& port == _opt_msg_.port
			&& mac == _opt_msg_.mac
			&& errcode == _opt_msg_.errcode
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceOptResult";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceOptResults :public MSPacket
{
 public:
	std::vector<MSProtoDeviceOptResult> results;

	bool operator==(const MSProtoDeviceOptResults& _opt_msg_) const
	{
		return results == _opt_msg_.results;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceOptResults";}
};

// -------------------------------------------------------------------

struct MSProtoDeleteDeviceIds :public MSPacket
{
 public:
	std::vector<uint64_t> ids;

	bool operator==(const MSProtoDeleteDeviceIds& _opt_msg_) const
	{
		return ids == _opt_msg_.ids;
	}

private:
	const char* getTypeName()const{return "MSProtoDeleteDeviceIds";}
};

// -------------------------------------------------------------------

struct MSProtoCapabilityInfo :public MSPacket
{
 public:
	// filed capability Required !!
	MSProtoCapability capability=(MSProtoCapability)0;
	// filed support Required !!
	bool support=false;

	bool operator==(const MSProtoCapabilityInfo& _opt_msg_) const
	{
		return capability == _opt_msg_.capability
			&& support == _opt_msg_.support;
	}

private:
	const char* getTypeName()const{return "MSProtoCapabilityInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceInfo :public MSPacket
{
 public:
	std::string firmwareVersion;
	std::string manufacturer;
	std::string model;
	std::string serialNumber;
	std::string hardwareVersion;
	std::string deviceName;
	std::vector<MSProtoCapabilityInfo> capabilitys;

	bool operator==(const MSProtoDeviceInfo& _opt_msg_) const
	{
		return firmwareVersion == _opt_msg_.firmwareVersion
			&& manufacturer == _opt_msg_.manufacturer
			&& model == _opt_msg_.model
			&& serialNumber == _opt_msg_.serialNumber
			&& hardwareVersion == _opt_msg_.hardwareVersion
			&& deviceName == _opt_msg_.deviceName
			&& capabilitys == _opt_msg_.capabilitys;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceStatus :public MSPacket
{
 public:
	// filed online Required !!
	bool online=false;
	std::string errmsg;

	bool operator==(const MSProtoDeviceStatus& _opt_msg_) const
	{
		return online == _opt_msg_.online
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceStatus";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceStatusInfo :public MSPacket
{
 public:
	// filed loginInfo Required !!
	MSProtoDeviceLoginInfo loginInfo;
	MSProtoDeviceInfo info;
	MSProtoDeviceStatus status;
	MSProtoRecordStatusInfo recordstatus;
	MSProtoNotifyType notifytype=(MSProtoNotifyType)0;

	bool operator==(const MSProtoDeviceStatusInfo& _opt_msg_) const
	{
		return loginInfo == _opt_msg_.loginInfo
			&& info == _opt_msg_.info
			&& status == _opt_msg_.status
			&& recordstatus == _opt_msg_.recordstatus
			&& notifytype == _opt_msg_.notifytype;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceStatusInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDeviceStatusInfos :public MSPacket
{
 public:
	std::vector<MSProtoDeviceStatusInfo> infos;

	bool operator==(const MSProtoDeviceStatusInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDeviceStatusInfos";}
};

// -------------------------------------------------------------------

struct MSProtoCamerAlarmInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed alarmType Required !!
	MSProtoCameraAlarmType alarmType=(MSProtoCameraAlarmType)0;
	// filed alarmTime Required !!
	uint64_t alarmTime=0;
	// filed duratTime Required !!
	uint32_t duratTime=0;
	// filed alarmStatus Required !!
	MSProtoCameraAlarmStatus alarmStatus=(MSProtoCameraAlarmStatus)0;
	uint32_t externInt=0;
	std::string externstr;

	bool operator==(const MSProtoCamerAlarmInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& alarmType == _opt_msg_.alarmType
			&& alarmTime == _opt_msg_.alarmTime
			&& duratTime == _opt_msg_.duratTime
			&& alarmStatus == _opt_msg_.alarmStatus
			&& externInt == _opt_msg_.externInt
			&& externstr == _opt_msg_.externstr;
	}

private:
	const char* getTypeName()const{return "MSProtoCamerAlarmInfo";}
};

// -------------------------------------------------------------------

struct MSProtoNotifyToDevice :public MSPacket
{
 public:
	// filed topic Required !!
	std::string topic;
	// filed body Required !!
	std::string body;
	// filed deviceId Required !!
	std::string deviceId;

	bool operator==(const MSProtoNotifyToDevice& _opt_msg_) const
	{
		return topic == _opt_msg_.topic
			&& body == _opt_msg_.body
			&& deviceId == _opt_msg_.deviceId;
	}

private:
	const char* getTypeName()const{return "MSProtoNotifyToDevice";}
};


}
}
