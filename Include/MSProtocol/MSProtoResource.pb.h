// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoResource.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoResourceType  
{
  MSProtoResourceType_None = 0,
  MSProtoResourceType_DeviceGroup = 1,
  MSProtoResourceType_Device = 2,
  MSProtoResourceType_View = 3
};

// ===================================================================

struct MSProtoViewInfo :public MSPacket
{
 public:
	uint32_t viewId=0;
	// filed videwname Required !!
	std::string videwname;
	std::string layout;
	MSProtoNotifyType notifytype=(MSProtoNotifyType)0;

	bool operator==(const MSProtoViewInfo& _opt_msg_) const
	{
		return viewId == _opt_msg_.viewId
			&& videwname == _opt_msg_.videwname
			&& layout == _opt_msg_.layout
			&& notifytype == _opt_msg_.notifytype;
	}

private:
	const char* getTypeName()const{return "MSProtoViewInfo";}
};

// -------------------------------------------------------------------

struct MSProtoViewInfos :public MSPacket
{
 public:
	std::vector<MSProtoViewInfo> infos;

	bool operator==(const MSProtoViewInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoViewInfos";}
};

// -------------------------------------------------------------------

struct MSProtoViewIds :public MSPacket
{
 public:
	std::vector<uint32_t> ids;

	bool operator==(const MSProtoViewIds& _opt_msg_) const
	{
		return ids == _opt_msg_.ids;
	}

private:
	const char* getTypeName()const{return "MSProtoViewIds";}
};


}
}
