// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoDeviceControl.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoPtzPatternStatus  
{
  MSProtoPtzPatternStatus_None = 0,
  MSProtoPtzPatternStatus_NoRecord = 1,
  MSProtoPtzPatternStatus_Recorded = 2,
  MSProtoPtzPatternStatus_Recording = 3,
  MSProtoPtzPatternStatus_Runing = 4
};

enum MSProtoPtzCommand  
{
  MSProtoPtzCommand_PTZ = 1,
  MSProtoPtzCommand_PTZ_Assist = 2,
  MSProtoPtzCommand_GetPreset = 3,
  MSProtoPtzCommand_SetPreset = 4,
  MSProtoPtzCommand_CleanPreset = 5,
  MSProtoPtzCommand_GtoPreset = 6,
  MSProtoPtzCommand_GetTour = 7,
  MSProtoPtzCommand_SetTour = 8,
  MSProtoPtzCommand_CleanTour = 9,
  MSProtoPtzCommand_CallTour = 10,
  MSProtoPtzCommand_GetPattern = 11,
  MSProtoPtzCommand_CleanPattern = 12,
  MSProtoPtzCommand_CallPatternRecord = 13,
  MSProtoPtzCommand_CallPattern = 14,
  MSProtoPtzCommand_Ptz3D = 15,
  MSProtoPtzCommand_GetSpeed = 16,
  MSProtoPtzCommand_SetSpeed = 17
};

enum MSProtoFishEyeCommand  
{
  MSProtoFishEyeCommand_None = 0,
  MSProtoFishEyeCommand_GetInstallation = 1,
  MSProtoFishEyeCommand_SetInstallation = 2,
  MSProtoFishEyeCommand_GetDisplay = 3,
  MSProtoFishEyeCommand_SetDisplay = 4
};

enum MSProtoSnapType  
{
  MSProtoSnapType_Cache = 1,
  MSProtoSnapType_Snap = 2
};

// ===================================================================

struct MSProtoPtzCommandInfo :public MSPacket
{
 public:
	// filed cmd Required !!
	MSProtoPTZCmd cmd=(MSProtoPTZCmd)0;
	uint32_t param=0;
	uint32_t speed=0;
	uint32_t streamid=0;

	bool operator==(const MSProtoPtzCommandInfo& _opt_msg_) const
	{
		return cmd == _opt_msg_.cmd
			&& param == _opt_msg_.param
			&& speed == _opt_msg_.speed
			&& streamid == _opt_msg_.streamid;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzCommandInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzIndexInfo :public MSPacket
{
 public:
	// filed index Required !!
	uint32_t index=0;
	std::string name;
	uint32_t streamid=0;

	bool operator==(const MSProtoPtzIndexInfo& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& name == _opt_msg_.name
			&& streamid == _opt_msg_.streamid;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzIndexInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzPresetInfo :public MSPacket
{
 public:
	// filed index Required !!
	uint32_t index=0;
	std::string name;
	bool enable=false;
	bool mdefault=false;
	uint32_t streamid=0;

	bool operator==(const MSProtoPtzPresetInfo& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& name == _opt_msg_.name
			&& enable == _opt_msg_.enable
			&& mdefault == _opt_msg_.mdefault
			&& streamid == _opt_msg_.streamid;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzPresetInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzPresetInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzPresetInfo> infos;

	bool operator==(const MSProtoPtzPresetInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzPresetInfos";}
};

// -------------------------------------------------------------------

struct MSProtoPtzTourPreset :public MSPacket
{
 public:
	// filed presetIndex Required !!
	uint32_t presetIndex=0;
	// filed speed Required !!
	uint32_t speed=0;
	// filed time Required !!
	uint32_t time=0;

	bool operator==(const MSProtoPtzTourPreset& _opt_msg_) const
	{
		return presetIndex == _opt_msg_.presetIndex
			&& speed == _opt_msg_.speed
			&& time == _opt_msg_.time;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzTourPreset";}
};

// -------------------------------------------------------------------

struct MSProtoPtzTourInfo :public MSPacket
{
 public:
	// filed index Required !!
	uint32_t index=0;
	std::string name;
	uint32_t streamid=0;
	std::vector<MSProtoPtzTourPreset> preset;

	bool operator==(const MSProtoPtzTourInfo& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& name == _opt_msg_.name
			&& streamid == _opt_msg_.streamid
			&& preset == _opt_msg_.preset;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzTourInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzTourInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzTourInfo> infos;

	bool operator==(const MSProtoPtzTourInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzTourInfos";}
};

// -------------------------------------------------------------------

struct MSProtoPtzTourRunInfo :public MSPacket
{
 public:
	// filed tourIndex Required !!
	uint32_t tourIndex=0;
	uint32_t time=0;
	uint32_t streamid=0;

	bool operator==(const MSProtoPtzTourRunInfo& _opt_msg_) const
	{
		return tourIndex == _opt_msg_.tourIndex
			&& time == _opt_msg_.time
			&& streamid == _opt_msg_.streamid;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzTourRunInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzPatternIndexInfo :public MSPacket
{
 public:
	// filed patterIndex Required !!
	uint32_t patterIndex=0;

	bool operator==(const MSProtoPtzPatternIndexInfo& _opt_msg_) const
	{
		return patterIndex == _opt_msg_.patterIndex;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzPatternIndexInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzPatternInfo :public MSPacket
{
 public:
	// filed index Required !!
	uint32_t index=0;
	// filed name Required !!
	std::string name;
	// filed status Required !!
	MSProtoPtzPatternStatus status=(MSProtoPtzPatternStatus)0;

	bool operator==(const MSProtoPtzPatternInfo& _opt_msg_) const
	{
		return index == _opt_msg_.index
			&& name == _opt_msg_.name
			&& status == _opt_msg_.status;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzPatternInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzPatternInfos :public MSPacket
{
 public:
	std::vector<MSProtoPtzPatternInfo> infos;

	bool operator==(const MSProtoPtzPatternInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzPatternInfos";}
};

// -------------------------------------------------------------------

struct MSProtoPtz3DInfo :public MSPacket
{
 public:
	// filed x Required !!
	uint32_t x=0;
	// filed y Required !!
	uint32_t y=0;
	// filed zoom Required !!
	uint32_t zoom=0;

	bool operator==(const MSProtoPtz3DInfo& _opt_msg_) const
	{
		return x == _opt_msg_.x
			&& y == _opt_msg_.y
			&& zoom == _opt_msg_.zoom;
	}

private:
	const char* getTypeName()const{return "MSProtoPtz3DInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzSpeedInfo :public MSPacket
{
 public:
	// filed speed Required !!
	uint32_t speed=0;

	bool operator==(const MSProtoPtzSpeedInfo& _opt_msg_) const
	{
		return speed == _opt_msg_.speed;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzSpeedInfo";}
};

// -------------------------------------------------------------------

struct MSProtoPtzInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed command Required !!
	MSProtoPtzCommand command=(MSProtoPtzCommand)0;
	bool start=false;
	std::string body;
	uint32_t runtime=0;

	bool operator==(const MSProtoPtzInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& command == _opt_msg_.command
			&& start == _opt_msg_.start
			&& body == _opt_msg_.body
			&& runtime == _opt_msg_.runtime;
	}

private:
	const char* getTypeName()const{return "MSProtoPtzInfo";}
};

// -------------------------------------------------------------------

struct MSProtoFishEyeInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed command Required !!
	MSProtoFishEyeCommand command=(MSProtoFishEyeCommand)0;
	std::string body;

	bool operator==(const MSProtoFishEyeInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& command == _opt_msg_.command
			&& body == _opt_msg_.body;
	}

private:
	const char* getTypeName()const{return "MSProtoFishEyeInfo";}
};

// -------------------------------------------------------------------

struct MSProtoFishEyeResponse :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed command Required !!
	MSProtoFishEyeCommand command=(MSProtoFishEyeCommand)0;
	// filed value Required !!
	uint32_t value=0;

	bool operator==(const MSProtoFishEyeResponse& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& command == _opt_msg_.command
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoFishEyeResponse";}
};

// -------------------------------------------------------------------

struct MSProtoSnapRequest :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	MSProtoSnapType type=(MSProtoSnapType)0;

	bool operator==(const MSProtoSnapRequest& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& type == _opt_msg_.type;
	}

private:
	const char* getTypeName()const{return "MSProtoSnapRequest";}
};

// -------------------------------------------------------------------

struct MSProtoSnapResponse :public MSPacket
{
 public:
	// filed imagedata Required !!
	std::string imagedata;
	// filed imagetype Required !!
	uint32_t imagetype=0;

	bool operator==(const MSProtoSnapResponse& _opt_msg_) const
	{
		return imagedata == _opt_msg_.imagedata
			&& imagetype == _opt_msg_.imagetype;
	}

private:
	const char* getTypeName()const{return "MSProtoSnapResponse";}
};


}
}
