// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoUser.proto

#pragma once
#include "MSProtocol/MSPacket.h"

namespace Milesight {
namespace Protocol {


enum MSProtoUserRoleType  
{
  MSProtoUserRoleType_None = 0,
  MSProtoUserRoleType_Owner = 1,
  MSProtoUserRoleType_Admin = 2,
  MSProtoUserRoleType_Operator = 3,
  MSProtoUserRoleType_Viewer = 4,
  MSProtoUserRoleType_Custom = 5
};

enum MSProtoUserRolePermission  
{
  MSProtoUserRolePermission_None = 0,
  MSProtoUserRolePermission_CanNotDelete = 1,
  MSProtoUserRolePermission_ModifyPassword = 2,
  MSProtoUserRolePermission_ManageAdminUsers = 4,
  MSProtoUserRolePermission_ManageCustomUsers = 8,
  MSProtoUserRolePermission_ManageOperatorAndViewUsers = 16,
  MSProtoUserRolePermission_ManageCustomRoles = 32,
  MSProtoUserRolePermission_ViewUserBehaviorLogs = 64,
  MSProtoUserRolePermission_ViewEventsLogs = 128,
  MSProtoUserRolePermission_ManageSystemSettings = 256,
  MSProtoUserRolePermission_ManageDeviceConfig = 512,
  MSProtoUserRolePermission_UserInput = 1024,
  MSProtoUserRolePermission_PtzControl = 2048,
  MSProtoUserRolePermission_ManualRecordAndSnap = 4096,
  MSProtoUserRolePermission_ViewRecordFile = 8192,
  MSProtoUserRolePermission_ExportRecordFile = 16384,
  MSProtoUserRolePermission_ViewAndManageAllTag = 32768,
  MSProtoUserRolePermission_ViewAndManageSelfTag = 65536,
  MSProtoUserRolePermission_ViewAndManageAllLock = 131072,
  MSProtoUserRolePermission_ViewAndManageSelfLock = 262144,
  MSProtoUserRolePermission_LiveView = 524288
};

// ===================================================================

struct MSProtoLoginRequest :public MSPacket
{
 public:
	// filed username Required !!
	std::string username;
	// filed password Required !!
	std::string password;

	bool operator==(const MSProtoLoginRequest& _opt_msg_) const
	{
		return username == _opt_msg_.username
			&& password == _opt_msg_.password;
	}

private:
	const char* getTypeName()const{return "MSProtoLoginRequest";}
};

// -------------------------------------------------------------------

struct MSProtoLoginResponse :public MSPacket
{
 public:
	// filed session Required !!
	std::string session;
	// filed timeout Required !!
	uint32_t timeout=0;
	bool needModifyPassword=false;

	bool operator==(const MSProtoLoginResponse& _opt_msg_) const
	{
		return session == _opt_msg_.session
			&& timeout == _opt_msg_.timeout
			&& needModifyPassword == _opt_msg_.needModifyPassword;
	}

private:
	const char* getTypeName()const{return "MSProtoLoginResponse";}
};

// -------------------------------------------------------------------

struct MSProtoLogoutRequest :public MSPacket
{
 public:
	// filed session Required !!
	std::string session;

	bool operator==(const MSProtoLogoutRequest& _opt_msg_) const
	{
		return session == _opt_msg_.session;
	}

private:
	const char* getTypeName()const{return "MSProtoLogoutRequest";}
};

// -------------------------------------------------------------------

struct MSProtoUserInfo :public MSPacket
{
 public:
	// filed username Required !!
	std::string username;
	// filed password Required !!
	std::string password;
	// filed userRolesId Required !!
	uint32_t userRolesId=0;
	// filed enable Required !!
	bool enable=false;
	std::string fullname;
	std::string email;
	std::string remarks;
	uint64_t expired=0;
	bool modiyFirstLogin=false;

	bool operator==(const MSProtoUserInfo& _opt_msg_) const
	{
		return username == _opt_msg_.username
			&& password == _opt_msg_.password
			&& userRolesId == _opt_msg_.userRolesId
			&& enable == _opt_msg_.enable
			&& fullname == _opt_msg_.fullname
			&& email == _opt_msg_.email
			&& remarks == _opt_msg_.remarks
			&& expired == _opt_msg_.expired
			&& modiyFirstLogin == _opt_msg_.modiyFirstLogin;
	}

private:
	const char* getTypeName()const{return "MSProtoUserInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCheckUserSesionRequest :public MSPacket
{
 public:
	// filed session Required !!
	std::string session;
	// filed mode Required !!
	uint32_t mode=0;

	bool operator==(const MSProtoCheckUserSesionRequest& _opt_msg_) const
	{
		return session == _opt_msg_.session
			&& mode == _opt_msg_.mode;
	}

private:
	const char* getTypeName()const{return "MSProtoCheckUserSesionRequest";}
};

// -------------------------------------------------------------------

struct MSProtoCheckUserSesionResponse :public MSPacket
{
 public:
	// filed username Required !!
	std::string username;
	// filed userRolesId Required !!
	uint32_t userRolesId=0;
	std::string fullname;
	std::string email;

	bool operator==(const MSProtoCheckUserSesionResponse& _opt_msg_) const
	{
		return username == _opt_msg_.username
			&& userRolesId == _opt_msg_.userRolesId
			&& fullname == _opt_msg_.fullname
			&& email == _opt_msg_.email;
	}

private:
	const char* getTypeName()const{return "MSProtoCheckUserSesionResponse";}
};

// -------------------------------------------------------------------

struct MSProtoNotifyToUser :public MSPacket
{
 public:
	// filed topic Required !!
	std::string topic;
	// filed body Required !!
	std::string body;
	// filed allUser Required !!
	bool allUser=false;
	std::vector<std::string> usernames;

	bool operator==(const MSProtoNotifyToUser& _opt_msg_) const
	{
		return topic == _opt_msg_.topic
			&& body == _opt_msg_.body
			&& allUser == _opt_msg_.allUser
			&& usernames == _opt_msg_.usernames;
	}

private:
	const char* getTypeName()const{return "MSProtoNotifyToUser";}
};

// -------------------------------------------------------------------

struct MSProtoUserRolesInfo :public MSPacket
{
 public:
	// filed id Required !!
	uint32_t id=0;
	// filed name Required !!
	std::string name;
	// filed type Required !!
	std::string type;
	// filed permissions Required !!
	uint32_t permissions=0;
	std::string remarks;

	bool operator==(const MSProtoUserRolesInfo& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& name == _opt_msg_.name
			&& type == _opt_msg_.type
			&& permissions == _opt_msg_.permissions
			&& remarks == _opt_msg_.remarks;
	}

private:
	const char* getTypeName()const{return "MSProtoUserRolesInfo";}
};

// -------------------------------------------------------------------

struct MSProtoUserRolesDetailInfo :public MSPacket
{
 public:
	// filed info Required !!
	MSProtoUserRolesInfo info;
	std::vector<std::string> users;

	bool operator==(const MSProtoUserRolesDetailInfo& _opt_msg_) const
	{
		return info == _opt_msg_.info
			&& users == _opt_msg_.users;
	}

private:
	const char* getTypeName()const{return "MSProtoUserRolesDetailInfo";}
};

// -------------------------------------------------------------------

struct MSProtoUserRolesDetailInfos :public MSPacket
{
 public:
	std::vector<MSProtoUserRolesDetailInfo> infos;

	bool operator==(const MSProtoUserRolesDetailInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoUserRolesDetailInfos";}
};

// -------------------------------------------------------------------

struct MSProtoUserRolesResourceInfo :public MSPacket
{
 public:
	// filed id Required !!
	uint32_t id=0;
	// filed type Required !!
	uint32_t type=0;
	// filed content Required !!
	std::string content;

	bool operator==(const MSProtoUserRolesResourceInfo& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& type == _opt_msg_.type
			&& content == _opt_msg_.content;
	}

private:
	const char* getTypeName()const{return "MSProtoUserRolesResourceInfo";}
};


}
}
