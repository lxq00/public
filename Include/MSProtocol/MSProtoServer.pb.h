// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoServer.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
namespace Milesight {
namespace Protocol {


// ===================================================================

struct MSProtoServicePropertyInfo :public MSPacket
{
 public:
	// filed cpu Required !!
	uint32_t cpu=0;
	// filed totalMemory Required !!
	uint32_t totalMemory=0;
	// filed usedMemory Required !!
	uint32_t usedMemory=0;
	// filed bandWidth Required !!
	uint32_t bandWidth=0;

	bool operator==(const MSProtoServicePropertyInfo& _opt_msg_) const
	{
		return cpu == _opt_msg_.cpu
			&& totalMemory == _opt_msg_.totalMemory
			&& usedMemory == _opt_msg_.usedMemory
			&& bandWidth == _opt_msg_.bandWidth;
	}

private:
	const char* getTypeName()const{return "MSProtoServicePropertyInfo";}
};

// -------------------------------------------------------------------

struct MSProtoServiceStatusInfo :public MSPacket
{
 public:
	// filed id Required !!
	uint32_t id=0;
	// filed ip Required !!
	std::string ip;
	// filed port Required !!
	uint32_t port=0;
	// filed name Required !!
	std::string name;
	// filed online Required !!
	bool online=false;
	std::string errmsg;

	bool operator==(const MSProtoServiceStatusInfo& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& ip == _opt_msg_.ip
			&& port == _opt_msg_.port
			&& name == _opt_msg_.name
			&& online == _opt_msg_.online
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoServiceStatusInfo";}
};

// -------------------------------------------------------------------

struct MSProtoLogInfo :public MSPacket
{
 public:
	// filed time Required !!
	uint64_t time=0;
	// filed source Required !!
	std::string source;
	std::string target;
	// filed type Required !!
	MSProtoEventType type=(MSProtoEventType)0;
	// filed action Required !!
	uint32_t action=0;
	// filed errorcode Required !!
	uint32_t errorcode=0;
	std::string errormsg;
	std::string clientip;

	bool operator==(const MSProtoLogInfo& _opt_msg_) const
	{
		return time == _opt_msg_.time
			&& source == _opt_msg_.source
			&& target == _opt_msg_.target
			&& type == _opt_msg_.type
			&& action == _opt_msg_.action
			&& errorcode == _opt_msg_.errorcode
			&& errormsg == _opt_msg_.errormsg
			&& clientip == _opt_msg_.clientip;
	}

private:
	const char* getTypeName()const{return "MSProtoLogInfo";}
};

// -------------------------------------------------------------------

struct MSProtoQueryLogResponse :public MSPacket
{
 public:
	// filed endoffile Required !!
	bool endoffile=false;
	// filed cursor Required !!
	uint32_t cursor=0;
	std::vector<MSProtoLogInfo> infos;

	bool operator==(const MSProtoQueryLogResponse& _opt_msg_) const
	{
		return endoffile == _opt_msg_.endoffile
			&& cursor == _opt_msg_.cursor
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoQueryLogResponse";}
};

// -------------------------------------------------------------------

struct MSProtoQueryLogRequest :public MSPacket
{
 public:
	// filed starttime Required !!
	uint64_t starttime=0;
	// filed stoptime Required !!
	uint64_t stoptime=0;
	uint32_t cursor=0;
	// filed limit Required !!
	uint32_t limit=0;

	bool operator==(const MSProtoQueryLogRequest& _opt_msg_) const
	{
		return starttime == _opt_msg_.starttime
			&& stoptime == _opt_msg_.stoptime
			&& cursor == _opt_msg_.cursor
			&& limit == _opt_msg_.limit;
	}

private:
	const char* getTypeName()const{return "MSProtoQueryLogRequest";}
};

// -------------------------------------------------------------------

struct MSProtoMiscInfo :public MSPacket
{
 public:
	// filed key Required !!
	std::string key;
	// filed value Required !!
	std::string value;

	bool operator==(const MSProtoMiscInfo& _opt_msg_) const
	{
		return key == _opt_msg_.key
			&& value == _opt_msg_.value;
	}

private:
	const char* getTypeName()const{return "MSProtoMiscInfo";}
};

// -------------------------------------------------------------------

struct MSProtoMiscInfos :public MSPacket
{
 public:
	std::vector<MSProtoMiscInfo> infos;

	bool operator==(const MSProtoMiscInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoMiscInfos";}
};

// -------------------------------------------------------------------

struct MSProtoServerNotify :public MSPacket
{
 public:
	// filed topic Required !!
	std::string topic;
	// filed msg Required !!
	std::string msg;

	bool operator==(const MSProtoServerNotify& _opt_msg_) const
	{
		return topic == _opt_msg_.topic
			&& msg == _opt_msg_.msg;
	}

private:
	const char* getTypeName()const{return "MSProtoServerNotify";}
};


}
}
