// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoStorage.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoPublic.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoDiskType  
{
  MSProtoDiskType_Usb = 0,
  MSProtoDiskType_CDRom = 1,
  MSProtoDiskType_Remove = 2,
  MSProtoDiskType_Disk = 3,
  MSProtoDiskType_Network = 4
};

enum MSProtoDiskProtocol  
{
  MSProtoDiskProtocol_None = 0,
  MSProtoDiskProtocol_Smb_Cifs = 1,
  MSProtoDiskProtocol_Nfs = 2
};

enum MSProtoFormatType  
{
  MSProtoFormatType_Unkown = 0,
  MSProtoFormatType_FAT = 1,
  MSProtoFormatType_NTFS = 2,
  MSProtoFormatType_Ext4 = 3
};

enum MSProtoDiskLogicStatus  
{
  MSProtoDiskLogicStatus_OK = 0,
  MSProtoDiskLogicStatus_BAD = 1
};

enum MSProtoStorageType  
{
  MSProtoStorageType_Time = 1,
  MSProtoStorageType_MotionDetecion = 2,
  MSProtoStorageType_Alarm = 3,
  MSProtoStorageType_VCA = 4
};

enum MSProtoStorageStreamType  
{
  MSProtoStorageStreamType_None = 0,
  MSProtoStorageStreamType_Main = 1,
  MSProtoStorageStreamType_Sub = 2,
  MSProtoStorageStreamType_All = 3
};

enum MSProtoTagType  
{
  MSProtoTagType_All = 0,
  MSProtoTagType_Record = 1,
  MSProtoTagType_Live = 2
};

enum MSProtoStorageSortCond  
{
  MSProtoStorageSortCond_None = 0,
  MSProtoStorageSortCond_DeviceName = 1,
  MSProtoStorageSortCond_TagName = 2,
  MSProtoStorageSortCond_StartTime = 3,
  MSProtoStorageSortCond_EndTime = 4,
  MSProtoStorageSortCond_CreateTime = 5,
  MSProtoStorageSortCond_LockFileSize = 6,
  MSProtoStorageSortCond_OccupiedSize = 7
};

enum MSProtoStoragePageQueryType  
{
  MSProtoStoragePageQueryType_ALLDevice = 0,
  MSProtoStoragePageQueryType_ALLTime = 1
};

// ===================================================================

struct MSProtoDiskStatus :public MSPacket
{
 public:
	// filed name Required !!
	std::string name;
	std::string alias;
	std::string serialNumber;
	MSProtoDiskType type=(MSProtoDiskType)0;
	MSProtoFormatType format=(MSProtoFormatType)0;
	// filed totalSize Required !!
	uint64_t totalSize=0;
	// filed freeSize Required !!
	uint64_t freeSize=0;
	// filed uesdSize Required !!
	uint64_t uesdSize=0;
	// filed isSystemDisk Required !!
	bool isSystemDisk=false;
	bool online=false;
	int32_t errcode=0;
	std::string errmsg;
	bool isExtendDisk=false;
	std::string address;
	std::string username;
	std::string password;
	MSProtoDiskProtocol protocol=(MSProtoDiskProtocol)0;
	MSProtoDiskLogicStatus logicStatus=(MSProtoDiskLogicStatus)0;

	bool operator==(const MSProtoDiskStatus& _opt_msg_) const
	{
		return name == _opt_msg_.name
			&& alias == _opt_msg_.alias
			&& serialNumber == _opt_msg_.serialNumber
			&& type == _opt_msg_.type
			&& format == _opt_msg_.format
			&& totalSize == _opt_msg_.totalSize
			&& freeSize == _opt_msg_.freeSize
			&& uesdSize == _opt_msg_.uesdSize
			&& isSystemDisk == _opt_msg_.isSystemDisk
			&& online == _opt_msg_.online
			&& errcode == _opt_msg_.errcode
			&& errmsg == _opt_msg_.errmsg
			&& isExtendDisk == _opt_msg_.isExtendDisk
			&& address == _opt_msg_.address
			&& username == _opt_msg_.username
			&& password == _opt_msg_.password
			&& protocol == _opt_msg_.protocol
			&& logicStatus == _opt_msg_.logicStatus;
	}

private:
	const char* getTypeName()const{return "MSProtoDiskStatus";}
};

// -------------------------------------------------------------------

struct MSProtoDiskSetting :public MSPacket
{
 public:
	// filed name Required !!
	std::string name;
	bool enable=false;
	uint32_t reserved=0;

	bool operator==(const MSProtoDiskSetting& _opt_msg_) const
	{
		return name == _opt_msg_.name
			&& enable == _opt_msg_.enable
			&& reserved == _opt_msg_.reserved;
	}

private:
	const char* getTypeName()const{return "MSProtoDiskSetting";}
};

// -------------------------------------------------------------------

struct MSProtoDiskInfo :public MSPacket
{
 public:
	// filed status Required !!
	MSProtoDiskStatus status;
	// filed setting Required !!
	MSProtoDiskSetting setting;

	bool operator==(const MSProtoDiskInfo& _opt_msg_) const
	{
		return status == _opt_msg_.status
			&& setting == _opt_msg_.setting;
	}

private:
	const char* getTypeName()const{return "MSProtoDiskInfo";}
};

// -------------------------------------------------------------------

struct MSProtoDiskInfos :public MSPacket
{
 public:
	std::vector<MSProtoDiskInfo> infos;

	bool operator==(const MSProtoDiskInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoDiskInfos";}
};

// -------------------------------------------------------------------

struct MSProtoDiskExtendInfo :public MSPacket
{
 public:
	std::string name;
	std::string address;
	std::string username;
	std::string password;
	MSProtoDiskType type=(MSProtoDiskType)0;
	MSProtoDiskProtocol protocol=(MSProtoDiskProtocol)0;
	bool modify=false;

	bool operator==(const MSProtoDiskExtendInfo& _opt_msg_) const
	{
		return name == _opt_msg_.name
			&& address == _opt_msg_.address
			&& username == _opt_msg_.username
			&& password == _opt_msg_.password
			&& type == _opt_msg_.type
			&& protocol == _opt_msg_.protocol
			&& modify == _opt_msg_.modify;
	}

private:
	const char* getTypeName()const{return "MSProtoDiskExtendInfo";}
};

// -------------------------------------------------------------------

struct MSProtoStorageSchedule :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed enable Required !!
	bool enable=false;
	// filed type Required !!
	MSProtoStorageType type=(MSProtoStorageType)0;
	std::string week1;
	std::string week2;
	std::string week3;
	std::string week4;
	std::string week5;
	std::string week6;
	std::string week7;

	bool operator==(const MSProtoStorageSchedule& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& enable == _opt_msg_.enable
			&& type == _opt_msg_.type
			&& week1 == _opt_msg_.week1
			&& week2 == _opt_msg_.week2
			&& week3 == _opt_msg_.week3
			&& week4 == _opt_msg_.week4
			&& week5 == _opt_msg_.week5
			&& week6 == _opt_msg_.week6
			&& week7 == _opt_msg_.week7;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageSchedule";}
};

// -------------------------------------------------------------------

struct MSProtoStorageSchedules :public MSPacket
{
 public:
	std::vector<MSProtoStorageSchedule> schedule;

	bool operator==(const MSProtoStorageSchedules& _opt_msg_) const
	{
		return schedule == _opt_msg_.schedule;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageSchedules";}
};

// -------------------------------------------------------------------

struct MSProtoStorageSetting :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	uint32_t preTime=0;
	uint32_t postTime=0;
	bool recordAudio=false;
	MSProtoStorageStreamType recordStream=(MSProtoStorageStreamType)0;
	uint32_t dueTime=0;
	bool ANR=false;

	bool operator==(const MSProtoStorageSetting& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& preTime == _opt_msg_.preTime
			&& postTime == _opt_msg_.postTime
			&& recordAudio == _opt_msg_.recordAudio
			&& recordStream == _opt_msg_.recordStream
			&& dueTime == _opt_msg_.dueTime
			&& ANR == _opt_msg_.ANR;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageSetting";}
};

// -------------------------------------------------------------------

struct MSProtoStorageSettingInfos :public MSPacket
{
 public:
	std::vector<MSProtoStorageSetting> infos;

	bool operator==(const MSProtoStorageSettingInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageSettingInfos";}
};

// -------------------------------------------------------------------

struct MSProtoRecordInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed recordtype Required !!
	MSProtoRecordType recordtype=(MSProtoRecordType)0;
	// filed starttime Required !!
	uint64_t starttime=0;
	// filed stoptime Required !!
	uint64_t stoptime=0;
	// filed recordsize Required !!
	uint32_t recordsize=0;
	// filed islock Required !!
	bool islock=false;
	// filed streamtype Required !!
	MSProtoStreamType streamtype=(MSProtoStreamType)0;
	std::string diskname;
	uint32_t fileno=0;
	std::string serveraddr;
	std::string serverid;

	bool operator==(const MSProtoRecordInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& recordtype == _opt_msg_.recordtype
			&& starttime == _opt_msg_.starttime
			&& stoptime == _opt_msg_.stoptime
			&& recordsize == _opt_msg_.recordsize
			&& islock == _opt_msg_.islock
			&& streamtype == _opt_msg_.streamtype
			&& diskname == _opt_msg_.diskname
			&& fileno == _opt_msg_.fileno
			&& serveraddr == _opt_msg_.serveraddr
			&& serverid == _opt_msg_.serverid;
	}

private:
	const char* getTypeName()const{return "MSProtoRecordInfo";}
};

// -------------------------------------------------------------------

struct MSProtoRecordInfos :public MSPacket
{
 public:
	std::vector<MSProtoRecordInfo> infos;

	bool operator==(const MSProtoRecordInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoRecordInfos";}
};

// -------------------------------------------------------------------

struct MSProtoStoragePageStartRequest :public MSPacket
{
 public:
	std::vector<uint64_t> devids;
	// filed starttime Required !!
	uint64_t starttime=0;
	// filed stopttime Required !!
	uint64_t stopttime=0;
	std::vector<MSProtoStoragePageQueryType> querytypes;

	bool operator==(const MSProtoStoragePageStartRequest& _opt_msg_) const
	{
		return devids == _opt_msg_.devids
			&& starttime == _opt_msg_.starttime
			&& stopttime == _opt_msg_.stopttime
			&& querytypes == _opt_msg_.querytypes;
	}

private:
	const char* getTypeName()const{return "MSProtoStoragePageStartRequest";}
};

// -------------------------------------------------------------------

struct MSProtoStoragePageQueryRequest :public MSPacket
{
 public:
	MSProtoTagType tagtype=(MSProtoTagType)0;
	MSProtoStorageSortCond condition=(MSProtoStorageSortCond)0;
	MSProtoSortType sorttype=(MSProtoSortType)0;
	uint32_t index=0;
	uint32_t count=0;

	bool operator==(const MSProtoStoragePageQueryRequest& _opt_msg_) const
	{
		return tagtype == _opt_msg_.tagtype
			&& condition == _opt_msg_.condition
			&& sorttype == _opt_msg_.sorttype
			&& index == _opt_msg_.index
			&& count == _opt_msg_.count;
	}

private:
	const char* getTypeName()const{return "MSProtoStoragePageQueryRequest";}
};

// -------------------------------------------------------------------

struct MSProtoRecordQueryRequest :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed starttime Required !!
	uint64_t starttime=0;
	// filed stopttime Required !!
	uint64_t stopttime=0;

	bool operator==(const MSProtoRecordQueryRequest& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& starttime == _opt_msg_.starttime
			&& stopttime == _opt_msg_.stopttime;
	}

private:
	const char* getTypeName()const{return "MSProtoRecordQueryRequest";}
};

// -------------------------------------------------------------------

struct MSProtoTagQueryRequest :public MSPacket
{
 public:
	std::vector<uint64_t> devids;
	uint64_t starttime=0;
	uint64_t stopttime=0;
	MSProtoTagType type=(MSProtoTagType)0;
	std::string keyword;

	bool operator==(const MSProtoTagQueryRequest& _opt_msg_) const
	{
		return devids == _opt_msg_.devids
			&& starttime == _opt_msg_.starttime
			&& stopttime == _opt_msg_.stopttime
			&& type == _opt_msg_.type
			&& keyword == _opt_msg_.keyword;
	}

private:
	const char* getTypeName()const{return "MSProtoTagQueryRequest";}
};

// -------------------------------------------------------------------

struct MSProtoRecLockQueryRequest :public MSPacket
{
 public:
	std::vector<uint64_t> devids;
	// filed starttime Required !!
	uint64_t starttime=0;
	// filed stopttime Required !!
	uint64_t stopttime=0;

	bool operator==(const MSProtoRecLockQueryRequest& _opt_msg_) const
	{
		return devids == _opt_msg_.devids
			&& starttime == _opt_msg_.starttime
			&& stopttime == _opt_msg_.stopttime;
	}

private:
	const char* getTypeName()const{return "MSProtoRecLockQueryRequest";}
};

// -------------------------------------------------------------------

struct MSProtoTagInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	std::string tagid;
	std::string tagname;
	std::string description;
	uint64_t starttime=0;
	uint32_t timelong=0;
	uint64_t creattime=0;
	MSProtoTagType type=(MSProtoTagType)0;
	std::string serveraddr;
	std::string serverid;

	bool operator==(const MSProtoTagInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& tagid == _opt_msg_.tagid
			&& tagname == _opt_msg_.tagname
			&& description == _opt_msg_.description
			&& starttime == _opt_msg_.starttime
			&& timelong == _opt_msg_.timelong
			&& creattime == _opt_msg_.creattime
			&& type == _opt_msg_.type
			&& serveraddr == _opt_msg_.serveraddr
			&& serverid == _opt_msg_.serverid;
	}

private:
	const char* getTypeName()const{return "MSProtoTagInfo";}
};

// -------------------------------------------------------------------

struct MSProtoTagInfos :public MSPacket
{
 public:
	std::vector<MSProtoTagInfo> infos;

	bool operator==(const MSProtoTagInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoTagInfos";}
};

// -------------------------------------------------------------------

struct MSProtoTagPageInfos :public MSPacket
{
 public:
	std::vector<MSProtoTagInfo> infos;
	uint32_t total=0;
	uint32_t index=0;

	bool operator==(const MSProtoTagPageInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos
			&& total == _opt_msg_.total
			&& index == _opt_msg_.index;
	}

private:
	const char* getTypeName()const{return "MSProtoTagPageInfos";}
};

// -------------------------------------------------------------------

struct MSProtoRecLockInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	std::string id;
	std::string description;
	uint64_t starttime=0;
	uint64_t endtime=0;
	uint64_t locksize=0;
	uint64_t occupiedsize=0;
	std::string serveraddr;
	std::string serverid;

	bool operator==(const MSProtoRecLockInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& id == _opt_msg_.id
			&& description == _opt_msg_.description
			&& starttime == _opt_msg_.starttime
			&& endtime == _opt_msg_.endtime
			&& locksize == _opt_msg_.locksize
			&& occupiedsize == _opt_msg_.occupiedsize
			&& serveraddr == _opt_msg_.serveraddr
			&& serverid == _opt_msg_.serverid;
	}

private:
	const char* getTypeName()const{return "MSProtoRecLockInfo";}
};

// -------------------------------------------------------------------

struct MSProtoRecLockInfos :public MSPacket
{
 public:
	std::vector<MSProtoRecLockInfo> infos;

	bool operator==(const MSProtoRecLockInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoRecLockInfos";}
};

// -------------------------------------------------------------------

struct MSProtoRecLockPageInfos :public MSPacket
{
 public:
	std::vector<MSProtoRecLockInfo> infos;
	uint32_t total=0;
	uint32_t index=0;

	bool operator==(const MSProtoRecLockPageInfos& _opt_msg_) const
	{
		return infos == _opt_msg_.infos
			&& total == _opt_msg_.total
			&& index == _opt_msg_.index;
	}

private:
	const char* getTypeName()const{return "MSProtoRecLockPageInfos";}
};

// -------------------------------------------------------------------

struct MSProtoStorageOptResult :public MSPacket
{
 public:
	// filed id Required !!
	std::string id;
	// filed errcode Required !!
	uint32_t errcode=0;
	// filed errmsg Required !!
	std::string errmsg;

	bool operator==(const MSProtoStorageOptResult& _opt_msg_) const
	{
		return id == _opt_msg_.id
			&& errcode == _opt_msg_.errcode
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageOptResult";}
};

// -------------------------------------------------------------------

struct MSProtoStorageOptResults :public MSPacket
{
 public:
	std::vector<MSProtoStorageOptResult> results;

	bool operator==(const MSProtoStorageOptResults& _opt_msg_) const
	{
		return results == _opt_msg_.results;
	}

private:
	const char* getTypeName()const{return "MSProtoStorageOptResults";}
};

// -------------------------------------------------------------------

struct MSProtoRecordStatusInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	// filed needrecord Required !!
	bool needrecord=false;
	// filed hasrecord Required !!
	bool hasrecord=false;
	// filed recordstatus Required !!
	bool recordstatus=false;
	// filed errmsg Required !!
	std::string errmsg;

	bool operator==(const MSProtoRecordStatusInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& needrecord == _opt_msg_.needrecord
			&& hasrecord == _opt_msg_.hasrecord
			&& recordstatus == _opt_msg_.recordstatus
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoRecordStatusInfo";}
};

// -------------------------------------------------------------------

struct MSProtoRecordStatusNotify :public MSPacket
{
 public:
	std::vector<MSProtoRecordStatusInfo> infos;

	bool operator==(const MSProtoRecordStatusNotify& _opt_msg_) const
	{
		return infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoRecordStatusNotify";}
};

// -------------------------------------------------------------------

struct MSProtoCameraRecordInfo :public MSPacket
{
 public:
	// filed devid Required !!
	uint64_t devid=0;
	uint64_t starttime=0;

	bool operator==(const MSProtoCameraRecordInfo& _opt_msg_) const
	{
		return devid == _opt_msg_.devid
			&& starttime == _opt_msg_.starttime;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraRecordInfo";}
};

// -------------------------------------------------------------------

struct MSProtoCameraRecordInfos :public MSPacket
{
 public:
	// filed serverid Required !!
	std::string serverid;
	std::vector<MSProtoCameraRecordInfo> infos;

	bool operator==(const MSProtoCameraRecordInfos& _opt_msg_) const
	{
		return serverid == _opt_msg_.serverid
			&& infos == _opt_msg_.infos;
	}

private:
	const char* getTypeName()const{return "MSProtoCameraRecordInfos";}
};


}
}
