// Generated by the MSProtoc compiler.  DO NOT EDIT!
// source: MSProtoMessage.proto

#pragma once
#include "MSProtocol/MSPacket.h"

#include "MSProtoUser.pb.h"
namespace Milesight {
namespace Protocol {


enum MSProtoMessageDirection  
{
  MSProtoMessageDirection_Request = 1,
  MSProtoMessageDirection_Response = 2
};

// ===================================================================

struct MSProtoMessageErrorInfo :public MSPacket
{
 public:
	// filed statscode Required !!
	int32_t statscode=0;
	std::string errmsg;

	bool operator==(const MSProtoMessageErrorInfo& _opt_msg_) const
	{
		return statscode == _opt_msg_.statscode
			&& errmsg == _opt_msg_.errmsg;
	}

private:
	const char* getTypeName()const{return "MSProtoMessageErrorInfo";}
};

// -------------------------------------------------------------------

struct MSProtoMessage :public MSPacket
{
 public:
	// filed direction Required !!
	MSProtoMessageDirection direction=(MSProtoMessageDirection)0;
	// filed sn Required !!
	uint32_t sn=0;
	// filed topic Required !!
	std::string topic;
	std::string body;
	MSProtoMessageErrorInfo errorinfo;
	std::string session;
	std::string extmsg;
	std::string fromserver;
	std::string toserver;
	uint32_t ttl=0;
	uint32_t timeout=0;

	bool operator==(const MSProtoMessage& _opt_msg_) const
	{
		return direction == _opt_msg_.direction
			&& sn == _opt_msg_.sn
			&& topic == _opt_msg_.topic
			&& body == _opt_msg_.body
			&& errorinfo == _opt_msg_.errorinfo
			&& session == _opt_msg_.session
			&& extmsg == _opt_msg_.extmsg
			&& fromserver == _opt_msg_.fromserver
			&& toserver == _opt_msg_.toserver
			&& ttl == _opt_msg_.ttl
			&& timeout == _opt_msg_.timeout;
	}

private:
	const char* getTypeName()const{return "MSProtoMessage";}
};

// -------------------------------------------------------------------

struct MSProtoForwardInfo :public MSPacket
{
 public:
	// filed srcaddr Required !!
	std::string srcaddr;

	bool operator==(const MSProtoForwardInfo& _opt_msg_) const
	{
		return srcaddr == _opt_msg_.srcaddr;
	}

private:
	const char* getTypeName()const{return "MSProtoForwardInfo";}
};

// -------------------------------------------------------------------

struct MSProtoForwardMessage :public MSPacket
{
 public:
	// filed forward Required !!
	MSProtoForwardInfo forward;
	MSProtoUserInfo user;

	bool operator==(const MSProtoForwardMessage& _opt_msg_) const
	{
		return forward == _opt_msg_.forward
			&& user == _opt_msg_.user;
	}

private:
	const char* getTypeName()const{return "MSProtoForwardMessage";}
};


}
}
